// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace EIS.EISModels;

public partial class EISDBContext : DbContext
{
    public EISDBContext(DbContextOptions<EISDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AlertIntervals> AlertIntervals { get; set; }

    public virtual DbSet<AlertLevelUsers> AlertLevelUsers { get; set; }

    public virtual DbSet<AlertStations> AlertStations { get; set; }

    public virtual DbSet<AlertUserDescription> AlertUserDescription { get; set; }

    public virtual DbSet<AlertUsers> AlertUsers { get; set; }

    public virtual DbSet<Cttable> Cttable { get; set; }

    public virtual DbSet<DownTimeTable> DownTimeTable { get; set; }

    public virtual DbSet<Dtreport> Dtreport { get; set; }

    public virtual DbSet<Dttypes> Dttypes { get; set; }

    public virtual DbSet<DttypesGroup> DttypesGroup { get; set; }

    public virtual DbSet<EasyMesjob> EasyMesjob { get; set; }

    public virtual DbSet<EasyMesstatus> EasyMesstatus { get; set; }

    public virtual DbSet<EasyMesttstypes> EasyMesttstypes { get; set; }

    public virtual DbSet<ErrorTable> ErrorTable { get; set; }

    public virtual DbSet<IfsDetectionTable> IfsDetectionTable { get; set; }

    public virtual DbSet<IfsFailureClassCodeTable> IfsFailureClassCodeTable { get; set; }

    public virtual DbSet<IfsFailureCodeTable> IfsFailureCodeTable { get; set; }

    public virtual DbSet<IfsHeaderTable> IfsHeaderTable { get; set; }

    public virtual DbSet<IfsMuszakTable> IfsMuszakTable { get; set; }

    public virtual DbSet<IfsValueTable> IfsValueTable { get; set; }

    public virtual DbSet<KpidataSource> KpidataSource { get; set; }

    public virtual DbSet<Kpiexpectation> Kpiexpectation { get; set; }

    public virtual DbSet<Kpiheader> Kpiheader { get; set; }

    public virtual DbSet<Kpiprocess> Kpiprocess { get; set; }

    public virtual DbSet<Kpiresponsible> Kpiresponsible { get; set; }

    public virtual DbSet<Kpisummantion> Kpisummantion { get; set; }

    public virtual DbSet<Kpiunit> Kpiunit { get; set; }

    public virtual DbSet<Kpivalues> Kpivalues { get; set; }

    public virtual DbSet<Location> Location { get; set; }

    public virtual DbSet<LzDolgozoTable> LzDolgozoTable { get; set; }

    public virtual DbSet<LzIntervalTable> LzIntervalTable { get; set; }

    public virtual DbSet<LzKefetartoTable> LzKefetartoTable { get; set; }

    public virtual DbSet<LzKefetartotipusTable> LzKefetartotipusTable { get; set; }

    public virtual DbSet<LzKefetartotipuslistaTable> LzKefetartotipuslistaTable { get; set; }

    public virtual DbSet<LzMunkaCodeTable> LzMunkaCodeTable { get; set; }

    public virtual DbSet<LzMunkanapTable> LzMunkanapTable { get; set; }

    public virtual DbSet<LzMuszakTable> LzMuszakTable { get; set; }

    public virtual DbSet<LzMuveletReszletTable> LzMuveletReszletTable { get; set; }

    public virtual DbSet<LzTeljesitmenyTable> LzTeljesitmenyTable { get; set; }

    public virtual DbSet<Mesevents> Mesevents { get; set; }

    public virtual DbSet<MesproductPlan> MesproductPlan { get; set; }

    public virtual DbSet<MesproductPlanType> MesproductPlanType { get; set; }

    public virtual DbSet<MesproductPlanWeek> MesproductPlanWeek { get; set; }

    public virtual DbSet<MesproductPlanWeekTemp> MesproductPlanWeekTemp { get; set; }

    public virtual DbSet<Mesworker> Mesworker { get; set; }

    public virtual DbSet<ReportUsers> ReportUsers { get; set; }

    public virtual DbSet<ShiftsTable> ShiftsTable { get; set; }

    public virtual DbSet<SystemParamTable> SystemParamTable { get; set; }

    public virtual DbSet<TablePlannedDownTime> TablePlannedDownTime { get; set; }

    public virtual DbSet<TableShiftType> TableShiftType { get; set; }

    public virtual DbSet<TableStation> TableStation { get; set; }

    public virtual DbSet<TableTypes> TableTypes { get; set; }

    public virtual DbSet<ViewCttableUpdate> ViewCttableUpdate { get; set; }

    public virtual DbSet<ViewGbmDownTimeReasons> ViewGbmDownTimeReasons { get; set; }

    public virtual DbSet<ViewIfsFailureCodeTable> ViewIfsFailureCodeTable { get; set; }

    public virtual DbSet<ViewIfsHeaderTable> ViewIfsHeaderTable { get; set; }

    public virtual DbSet<ViewIfsHeadersList> ViewIfsHeadersList { get; set; }

    public virtual DbSet<ViewIfsValueSearchTable> ViewIfsValueSearchTable { get; set; }

    public virtual DbSet<ViewIfsValueTable> ViewIfsValueTable { get; set; }

    public virtual DbSet<ViewKpivalues> ViewKpivalues { get; set; }

    public virtual DbSet<ViewLzAbFor> ViewLzAbFor { get; set; }

    public virtual DbSet<ViewLzCompetency> ViewLzCompetency { get; set; }

    public virtual DbSet<ViewLzHours> ViewLzHours { get; set; }

    public virtual DbSet<ViewLzIntervalTable> ViewLzIntervalTable { get; set; }

    public virtual DbSet<ViewLzKefetartoTable> ViewLzKefetartoTable { get; set; }

    public virtual DbSet<ViewLzKefetartotipusTable> ViewLzKefetartotipusTable { get; set; }

    public virtual DbSet<ViewLzMunkanapTable> ViewLzMunkanapTable { get; set; }

    public virtual DbSet<ViewLzSearch> ViewLzSearch { get; set; }

    public virtual DbSet<ViewLzSzabadsag> ViewLzSzabadsag { get; set; }

    public virtual DbSet<ViewLzTeljesitmenyTable> ViewLzTeljesitmenyTable { get; set; }

    public virtual DbSet<ViewReportUsers> ViewReportUsers { get; set; }

    public virtual DbSet<ViewShiftTypes> ViewShiftTypes { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.UseCollation("Hungarian_CI_AS");

        modelBuilder.Entity<AlertIntervals>(entity =>
        {
            entity.Property(e => e.Description).HasMaxLength(128);
            entity.Property(e => e.DescriptionEn).HasMaxLength(128);
            entity.Property(e => e.Dt).HasColumnName("DT");
            entity.Property(e => e.LineId)
                .HasMaxLength(10)
                .HasColumnName("LineID");
            entity.Property(e => e.Text)
                .IsRequired()
                .HasMaxLength(141)
                .HasComputedColumnSql("(concat([LineId],' - ',[Description]))", false);
        });

        modelBuilder.Entity<AlertLevelUsers>(entity =>
        {
            entity.Property(e => e.AlertIntervalsId).HasColumnName("AlertIntervalsID");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.AlertIntervals).WithMany(p => p.AlertLevelUsers)
                .HasForeignKey(d => d.AlertIntervalsId)
                .HasConstraintName("FK_AlertLevelUsers_AlertIntervals");

            entity.HasOne(d => d.User).WithMany(p => p.AlertLevelUsers)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_AlertLevelUsers_AlertUsers");
        });

        modelBuilder.Entity<AlertStations>(entity =>
        {
            entity.Property(e => e.Description).HasMaxLength(128);
            entity.Property(e => e.DescriptionEn).HasMaxLength(128);
            entity.Property(e => e.LineId)
                .HasMaxLength(10)
                .HasColumnName("LineID");
            entity.Property(e => e.Station).HasMaxLength(7);
            entity.Property(e => e.StationId).HasColumnName("StationID");
            entity.Property(e => e.Text)
                .IsRequired()
                .HasMaxLength(151)
                .HasComputedColumnSql("(concat([LineId],' - ',[Station],' - ',[Description]))", false);
        });

        modelBuilder.Entity<AlertUserDescription>(entity =>
        {
            entity.Property(e => e.Description).HasMaxLength(128);
            entity.Property(e => e.DescriptionEn).HasMaxLength(128);
        });

        modelBuilder.Entity<AlertUsers>(entity =>
        {
            entity.Property(e => e.Active).HasDefaultValue(false);
            entity.Property(e => e.DescriptionId).HasColumnName("DescriptionID");
            entity.Property(e => e.Email).HasMaxLength(128);
            entity.Property(e => e.FullName).HasMaxLength(128);
            entity.Property(e => e.UserName).HasMaxLength(10);

            entity.HasOne(d => d.Description).WithMany(p => p.AlertUsers)
                .HasForeignKey(d => d.DescriptionId)
                .HasConstraintName("FK_AlertUsers_AlertUserDescription");
        });

        modelBuilder.Entity<Cttable>(entity =>
        {
            entity.ToTable("CTTable");

            entity.HasIndex(e => new { e.TimeStamp, e.LineId, e.StationId }, "IX_CTTable").IsUnique();

            entity.Property(e => e.AlertLevel)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasComputedColumnSql("(case when [ct]>=(5)*(60) AND [ct]<(10)*(60) then 'AL1' when [ct]>=(10)*(60) AND [ct]<(15)*(60) then 'AL2' when [ct]>=(15)*(60) AND [ct]<(30)*(60) then 'AL3' when [ct]>=(30)*(60) then 'AL4' else '-' end)", false);
            entity.Property(e => e.Ct).HasColumnName("CT");
            entity.Property(e => e.Downtime).HasComputedColumnSql("(CONVERT([int],round([CT],(0))))", false);
            entity.Property(e => e.Dt)
                .HasComputedColumnSql("(CONVERT([int],round([CT],(0))))", false)
                .HasColumnName("DT");
            entity.Property(e => e.Dtstatus)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasComputedColumnSql("(case when dateadd(second,[ct],[timestamp])>=dateadd(minute,(-1),getdate()) then 'Active' else 'Inactive' end)", false)
                .HasColumnName("DTStatus");
            entity.Property(e => e.EndTime)
                .HasComputedColumnSql("(dateadd(second,[ct],[timestamp]))", false)
                .HasColumnType("datetime");
            entity.Property(e => e.LastAlertLevel).HasMaxLength(10);
            entity.Property(e => e.LineId)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("LineID");
            entity.Property(e => e.LongCt).HasColumnName("LongCT");
            entity.Property(e => e.Nok).HasColumnName("NOK");
            entity.Property(e => e.Pt).HasColumnName("PT");
            entity.Property(e => e.StartTime).HasColumnType("datetime");
            entity.Property(e => e.StationId).HasColumnName("StationID");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.TesterId).HasColumnName("TesterID");
            entity.Property(e => e.TesterSubId).HasColumnName("TesterSubID");
            entity.Property(e => e.TimeStamp).HasColumnType("datetime");
            entity.Property(e => e.TypeId)
                .HasMaxLength(10)
                .HasDefaultValue("0000")
                .IsFixedLength()
                .HasColumnName("TypeID");
            entity.Property(e => e.Wt).HasColumnName("WT");
            entity.Property(e => e.Wtnr).HasColumnName("WTNR");
            entity.Property(e => e.Xct).HasColumnName("XCT");
            entity.Property(e => e.Xpt).HasColumnName("XPT");
            entity.Property(e => e.Xwt).HasColumnName("XWT");

            entity.HasOne(d => d.Dttypes).WithMany(p => p.Cttable)
                .HasPrincipalKey(p => new { p.LineId, p.CodeId })
                .HasForeignKey(d => new { d.LineId, d.TypeId })
                .HasConstraintName("FK_CTTable_DTTypes");
        });

        modelBuilder.Entity<DownTimeTable>(entity =>
        {
            entity.HasIndex(e => new { e.LineId, e.StartTime, e.Muszak, e.TimeStamp }, "IX_DownTimeTable").IsUnique();

            entity.HasIndex(e => new { e.LineId, e.TimeStamp }, "IX_DownTimeTable_ID").IsUnique();

            entity.Property(e => e.AlertLevel)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasComputedColumnSql("(case when [Downtime]>=(5) AND [Downtime]<(10) then 'AL1' when [Downtime]>=(10) AND [Downtime]<(15) then 'AL2' when [Downtime]>=(15) AND [Downtime]<(30) then 'AL3' when [Downtime]>=(30) then 'AL4' else '-' end)", false);
            entity.Property(e => e.Dt).HasColumnName("DT");
            entity.Property(e => e.EndTime)
                .HasComputedColumnSql("(dateadd(minute,[downtime],[timestamp]))", false)
                .HasColumnType("datetime");
            entity.Property(e => e.LastAlertLevel).HasMaxLength(10);
            entity.Property(e => e.LineId)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("LineID");
            entity.Property(e => e.StartTime).HasColumnType("datetime");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasComputedColumnSql("(case when dateadd(minute,[downtime],[timestamp])>=dateadd(minute,(-1),getdate()) then 'Active' else 'Inactive' end)", false);
            entity.Property(e => e.TimeStamp).HasColumnType("datetime");
            entity.Property(e => e.TypeId)
                .HasMaxLength(10)
                .HasDefaultValue("0000")
                .IsFixedLength()
                .HasColumnName("TypeID");

            entity.HasOne(d => d.Dttypes).WithMany(p => p.DownTimeTable)
                .HasPrincipalKey(p => new { p.LineId, p.CodeId })
                .HasForeignKey(d => new { d.LineId, d.TypeId })
                .HasConstraintName("FK_DownTimeTable_DTTypes");
        });

        modelBuilder.Entity<Dtreport>(entity =>
        {
            entity.ToTable("DTReport");

            entity.HasIndex(e => new { e.LineId, e.StartTime, e.Shift }, "IX_DTReport").IsUnique();

            entity.Property(e => e.ChangeTimeA).HasColumnType("datetime");
            entity.Property(e => e.ChangeTimeB).HasColumnType("datetime");
            entity.Property(e => e.ChangeTimeC).HasColumnType("datetime");
            entity.Property(e => e.ChangeTimeD).HasColumnType("datetime");
            entity.Property(e => e.ChangeTimeE).HasColumnType("datetime");
            entity.Property(e => e.CurrentMessageA)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CurrentMessageB)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CurrentMessageC)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CurrentMessageD)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CurrentMessageE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CurrentfromSql).HasColumnName("CurrentfromSQL");
            entity.Property(e => e.CurrentfromSqla).HasColumnName("CurrentfromSQLA");
            entity.Property(e => e.CurrentfromSqlb).HasColumnName("CurrentfromSQLB");
            entity.Property(e => e.CurrentfromSqlc).HasColumnName("CurrentfromSQLC");
            entity.Property(e => e.CurrentfromSqld).HasColumnName("CurrentfromSQLD");
            entity.Property(e => e.CurrentfromSqle).HasColumnName("CurrentfromSQLE");
            entity.Property(e => e.Date)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComputedColumnSql("(CONVERT([varchar],[starttime],(102)))", false)
                .HasColumnName("date");
            entity.Property(e => e.DownTimefromSql).HasColumnName("DownTimefromSQL");
            entity.Property(e => e.DownTimefromSqla).HasColumnName("DownTimefromSQLA");
            entity.Property(e => e.DownTimefromSqlb).HasColumnName("DownTimefromSQLB");
            entity.Property(e => e.DownTimefromSqlc).HasColumnName("DownTimefromSQLC");
            entity.Property(e => e.DownTimefromSqld).HasColumnName("DownTimefromSQLD");
            entity.Property(e => e.DownTimefromSqle).HasColumnName("DownTimefromSQLE");
            entity.Property(e => e.EolfromSql).HasColumnName("EOLFromSQL");
            entity.Property(e => e.EolfromSqla).HasColumnName("EOLFromSQLA");
            entity.Property(e => e.EolfromSqlb).HasColumnName("EOLFromSQLB");
            entity.Property(e => e.EolfromSqlc).HasColumnName("EOLFromSQLC");
            entity.Property(e => e.EolfromSqld).HasColumnName("EOLFromSQLD");
            entity.Property(e => e.EolfromSqle).HasColumnName("EOLFromSQLE");
            entity.Property(e => e.EolkorrA).HasColumnName("EOLKorrA");
            entity.Property(e => e.EolkorrB).HasColumnName("EOLKorrB");
            entity.Property(e => e.EolkorrC).HasColumnName("EOLKorrC");
            entity.Property(e => e.EolkorrD).HasColumnName("EOLKorrD");
            entity.Property(e => e.EolkorrE).HasColumnName("EOLKorrE");
            entity.Property(e => e.ErrorIda1).HasColumnName("ErrorIDA1");
            entity.Property(e => e.ErrorIda10).HasColumnName("ErrorIDA10");
            entity.Property(e => e.ErrorIda11).HasColumnName("ErrorIDA11");
            entity.Property(e => e.ErrorIda12).HasColumnName("ErrorIDA12");
            entity.Property(e => e.ErrorIda13).HasColumnName("ErrorIDA13");
            entity.Property(e => e.ErrorIda14).HasColumnName("ErrorIDA14");
            entity.Property(e => e.ErrorIda15).HasColumnName("ErrorIDA15");
            entity.Property(e => e.ErrorIda2).HasColumnName("ErrorIDA2");
            entity.Property(e => e.ErrorIda3).HasColumnName("ErrorIDA3");
            entity.Property(e => e.ErrorIda4).HasColumnName("ErrorIDA4");
            entity.Property(e => e.ErrorIda5).HasColumnName("ErrorIDA5");
            entity.Property(e => e.ErrorIda6).HasColumnName("ErrorIDA6");
            entity.Property(e => e.ErrorIda7).HasColumnName("ErrorIDA7");
            entity.Property(e => e.ErrorIda8).HasColumnName("ErrorIDA8");
            entity.Property(e => e.ErrorIda9).HasColumnName("ErrorIDA9");
            entity.Property(e => e.ErrorIdb1).HasColumnName("ErrorIDB1");
            entity.Property(e => e.ErrorIdb10).HasColumnName("ErrorIDB10");
            entity.Property(e => e.ErrorIdb11).HasColumnName("ErrorIDB11");
            entity.Property(e => e.ErrorIdb12).HasColumnName("ErrorIDB12");
            entity.Property(e => e.ErrorIdb13).HasColumnName("ErrorIDB13");
            entity.Property(e => e.ErrorIdb14).HasColumnName("ErrorIDB14");
            entity.Property(e => e.ErrorIdb15).HasColumnName("ErrorIDB15");
            entity.Property(e => e.ErrorIdb2).HasColumnName("ErrorIDB2");
            entity.Property(e => e.ErrorIdb3).HasColumnName("ErrorIDB3");
            entity.Property(e => e.ErrorIdb4).HasColumnName("ErrorIDB4");
            entity.Property(e => e.ErrorIdb5).HasColumnName("ErrorIDB5");
            entity.Property(e => e.ErrorIdb6).HasColumnName("ErrorIDB6");
            entity.Property(e => e.ErrorIdb7).HasColumnName("ErrorIDB7");
            entity.Property(e => e.ErrorIdb8).HasColumnName("ErrorIDB8");
            entity.Property(e => e.ErrorIdb9).HasColumnName("ErrorIDB9");
            entity.Property(e => e.ErrorIdc1).HasColumnName("ErrorIDC1");
            entity.Property(e => e.ErrorIdc10).HasColumnName("ErrorIDC10");
            entity.Property(e => e.ErrorIdc11).HasColumnName("ErrorIDC11");
            entity.Property(e => e.ErrorIdc12).HasColumnName("ErrorIDC12");
            entity.Property(e => e.ErrorIdc13).HasColumnName("ErrorIDC13");
            entity.Property(e => e.ErrorIdc14).HasColumnName("ErrorIDC14");
            entity.Property(e => e.ErrorIdc15).HasColumnName("ErrorIDC15");
            entity.Property(e => e.ErrorIdc2).HasColumnName("ErrorIDC2");
            entity.Property(e => e.ErrorIdc3).HasColumnName("ErrorIDC3");
            entity.Property(e => e.ErrorIdc4).HasColumnName("ErrorIDC4");
            entity.Property(e => e.ErrorIdc5).HasColumnName("ErrorIDC5");
            entity.Property(e => e.ErrorIdc6).HasColumnName("ErrorIDC6");
            entity.Property(e => e.ErrorIdc7).HasColumnName("ErrorIDC7");
            entity.Property(e => e.ErrorIdc8).HasColumnName("ErrorIDC8");
            entity.Property(e => e.ErrorIdc9).HasColumnName("ErrorIDC9");
            entity.Property(e => e.ErrorIdd1).HasColumnName("ErrorIDD1");
            entity.Property(e => e.ErrorIdd10).HasColumnName("ErrorIDD10");
            entity.Property(e => e.ErrorIdd11).HasColumnName("ErrorIDD11");
            entity.Property(e => e.ErrorIdd12).HasColumnName("ErrorIDD12");
            entity.Property(e => e.ErrorIdd13).HasColumnName("ErrorIDD13");
            entity.Property(e => e.ErrorIdd14).HasColumnName("ErrorIDD14");
            entity.Property(e => e.ErrorIdd15).HasColumnName("ErrorIDD15");
            entity.Property(e => e.ErrorIdd2).HasColumnName("ErrorIDD2");
            entity.Property(e => e.ErrorIdd3).HasColumnName("ErrorIDD3");
            entity.Property(e => e.ErrorIdd4).HasColumnName("ErrorIDD4");
            entity.Property(e => e.ErrorIdd5).HasColumnName("ErrorIDD5");
            entity.Property(e => e.ErrorIdd6).HasColumnName("ErrorIDD6");
            entity.Property(e => e.ErrorIdd7).HasColumnName("ErrorIDD7");
            entity.Property(e => e.ErrorIdd8).HasColumnName("ErrorIDD8");
            entity.Property(e => e.ErrorIdd9).HasColumnName("ErrorIDD9");
            entity.Property(e => e.ErrorIde1).HasColumnName("ErrorIDE1");
            entity.Property(e => e.ErrorIde10).HasColumnName("ErrorIDE10");
            entity.Property(e => e.ErrorIde11).HasColumnName("ErrorIDE11");
            entity.Property(e => e.ErrorIde12).HasColumnName("ErrorIDE12");
            entity.Property(e => e.ErrorIde13).HasColumnName("ErrorIDE13");
            entity.Property(e => e.ErrorIde14).HasColumnName("ErrorIDE14");
            entity.Property(e => e.ErrorIde15).HasColumnName("ErrorIDE15");
            entity.Property(e => e.ErrorIde2).HasColumnName("ErrorIDE2");
            entity.Property(e => e.ErrorIde3).HasColumnName("ErrorIDE3");
            entity.Property(e => e.ErrorIde4).HasColumnName("ErrorIDE4");
            entity.Property(e => e.ErrorIde5).HasColumnName("ErrorIDE5");
            entity.Property(e => e.ErrorIde6).HasColumnName("ErrorIDE6");
            entity.Property(e => e.ErrorIde7).HasColumnName("ErrorIDE7");
            entity.Property(e => e.ErrorIde8).HasColumnName("ErrorIDE8");
            entity.Property(e => e.ErrorIde9).HasColumnName("ErrorIDE9");
            entity.Property(e => e.ErrorNra1).HasColumnName("ErrorNRA1");
            entity.Property(e => e.ErrorNra10).HasColumnName("ErrorNRA10");
            entity.Property(e => e.ErrorNra11).HasColumnName("ErrorNRA11");
            entity.Property(e => e.ErrorNra12).HasColumnName("ErrorNRA12");
            entity.Property(e => e.ErrorNra13).HasColumnName("ErrorNRA13");
            entity.Property(e => e.ErrorNra14).HasColumnName("ErrorNRA14");
            entity.Property(e => e.ErrorNra15).HasColumnName("ErrorNRA15");
            entity.Property(e => e.ErrorNra2).HasColumnName("ErrorNRA2");
            entity.Property(e => e.ErrorNra3).HasColumnName("ErrorNRA3");
            entity.Property(e => e.ErrorNra4).HasColumnName("ErrorNRA4");
            entity.Property(e => e.ErrorNra5).HasColumnName("ErrorNRA5");
            entity.Property(e => e.ErrorNra6).HasColumnName("ErrorNRA6");
            entity.Property(e => e.ErrorNra7).HasColumnName("ErrorNRA7");
            entity.Property(e => e.ErrorNra8).HasColumnName("ErrorNRA8");
            entity.Property(e => e.ErrorNra9).HasColumnName("ErrorNRA9");
            entity.Property(e => e.ErrorNrb1).HasColumnName("ErrorNRB1");
            entity.Property(e => e.ErrorNrb10).HasColumnName("ErrorNRB10");
            entity.Property(e => e.ErrorNrb11).HasColumnName("ErrorNRB11");
            entity.Property(e => e.ErrorNrb12).HasColumnName("ErrorNRB12");
            entity.Property(e => e.ErrorNrb13).HasColumnName("ErrorNRB13");
            entity.Property(e => e.ErrorNrb14).HasColumnName("ErrorNRB14");
            entity.Property(e => e.ErrorNrb15).HasColumnName("ErrorNRB15");
            entity.Property(e => e.ErrorNrb2).HasColumnName("ErrorNRB2");
            entity.Property(e => e.ErrorNrb3).HasColumnName("ErrorNRB3");
            entity.Property(e => e.ErrorNrb4).HasColumnName("ErrorNRB4");
            entity.Property(e => e.ErrorNrb5).HasColumnName("ErrorNRB5");
            entity.Property(e => e.ErrorNrb6).HasColumnName("ErrorNRB6");
            entity.Property(e => e.ErrorNrb7).HasColumnName("ErrorNRB7");
            entity.Property(e => e.ErrorNrb8).HasColumnName("ErrorNRB8");
            entity.Property(e => e.ErrorNrb9).HasColumnName("ErrorNRB9");
            entity.Property(e => e.ErrorNrc1).HasColumnName("ErrorNRC1");
            entity.Property(e => e.ErrorNrc10).HasColumnName("ErrorNRC10");
            entity.Property(e => e.ErrorNrc11).HasColumnName("ErrorNRC11");
            entity.Property(e => e.ErrorNrc12).HasColumnName("ErrorNRC12");
            entity.Property(e => e.ErrorNrc13).HasColumnName("ErrorNRC13");
            entity.Property(e => e.ErrorNrc14).HasColumnName("ErrorNRC14");
            entity.Property(e => e.ErrorNrc15).HasColumnName("ErrorNRC15");
            entity.Property(e => e.ErrorNrc2).HasColumnName("ErrorNRC2");
            entity.Property(e => e.ErrorNrc3).HasColumnName("ErrorNRC3");
            entity.Property(e => e.ErrorNrc4).HasColumnName("ErrorNRC4");
            entity.Property(e => e.ErrorNrc5).HasColumnName("ErrorNRC5");
            entity.Property(e => e.ErrorNrc6).HasColumnName("ErrorNRC6");
            entity.Property(e => e.ErrorNrc7).HasColumnName("ErrorNRC7");
            entity.Property(e => e.ErrorNrc8).HasColumnName("ErrorNRC8");
            entity.Property(e => e.ErrorNrc9).HasColumnName("ErrorNRC9");
            entity.Property(e => e.ErrorNrd1).HasColumnName("ErrorNRD1");
            entity.Property(e => e.ErrorNrd10).HasColumnName("ErrorNRD10");
            entity.Property(e => e.ErrorNrd11).HasColumnName("ErrorNRD11");
            entity.Property(e => e.ErrorNrd12).HasColumnName("ErrorNRD12");
            entity.Property(e => e.ErrorNrd13).HasColumnName("ErrorNRD13");
            entity.Property(e => e.ErrorNrd14).HasColumnName("ErrorNRD14");
            entity.Property(e => e.ErrorNrd15).HasColumnName("ErrorNRD15");
            entity.Property(e => e.ErrorNrd2).HasColumnName("ErrorNRD2");
            entity.Property(e => e.ErrorNrd3).HasColumnName("ErrorNRD3");
            entity.Property(e => e.ErrorNrd4).HasColumnName("ErrorNRD4");
            entity.Property(e => e.ErrorNrd5).HasColumnName("ErrorNRD5");
            entity.Property(e => e.ErrorNrd6).HasColumnName("ErrorNRD6");
            entity.Property(e => e.ErrorNrd7).HasColumnName("ErrorNRD7");
            entity.Property(e => e.ErrorNrd8).HasColumnName("ErrorNRD8");
            entity.Property(e => e.ErrorNrd9).HasColumnName("ErrorNRD9");
            entity.Property(e => e.ErrorNre1).HasColumnName("ErrorNRE1");
            entity.Property(e => e.ErrorNre10).HasColumnName("ErrorNRE10");
            entity.Property(e => e.ErrorNre11).HasColumnName("ErrorNRE11");
            entity.Property(e => e.ErrorNre12).HasColumnName("ErrorNRE12");
            entity.Property(e => e.ErrorNre13).HasColumnName("ErrorNRE13");
            entity.Property(e => e.ErrorNre14).HasColumnName("ErrorNRE14");
            entity.Property(e => e.ErrorNre15).HasColumnName("ErrorNRE15");
            entity.Property(e => e.ErrorNre2).HasColumnName("ErrorNRE2");
            entity.Property(e => e.ErrorNre3).HasColumnName("ErrorNRE3");
            entity.Property(e => e.ErrorNre4).HasColumnName("ErrorNRE4");
            entity.Property(e => e.ErrorNre5).HasColumnName("ErrorNRE5");
            entity.Property(e => e.ErrorNre6).HasColumnName("ErrorNRE6");
            entity.Property(e => e.ErrorNre7).HasColumnName("ErrorNRE7");
            entity.Property(e => e.ErrorNre8).HasColumnName("ErrorNRE8");
            entity.Property(e => e.ErrorNre9).HasColumnName("ErrorNRE9");
            entity.Property(e => e.GoodfromSql).HasColumnName("GoodfromSQL");
            entity.Property(e => e.GoodfromSqla).HasColumnName("GoodfromSQLA");
            entity.Property(e => e.GoodfromSqlb).HasColumnName("GoodfromSQLB");
            entity.Property(e => e.GoodfromSqlc).HasColumnName("GoodfromSQLC");
            entity.Property(e => e.GoodfromSqld).HasColumnName("GoodfromSQLD");
            entity.Property(e => e.GoodfromSqle).HasColumnName("GoodfromSQLE");
            entity.Property(e => e.LineId)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("LineID");
            entity.Property(e => e.Message)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.MessageA)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.MessageB)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.MessageC)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.MessageD)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.MessageE)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.RequestfromSql).HasColumnName("RequestfromSQL");
            entity.Property(e => e.RequestfromSqla).HasColumnName("RequestfromSQLA");
            entity.Property(e => e.RequestfromSqlb).HasColumnName("RequestfromSQLB");
            entity.Property(e => e.RequestfromSqlc).HasColumnName("RequestfromSQLC");
            entity.Property(e => e.RequestfromSqld).HasColumnName("RequestfromSQLD");
            entity.Property(e => e.RequestfromSqle).HasColumnName("RequestfromSQLE");
            entity.Property(e => e.StartTime).HasColumnType("datetime");
            entity.Property(e => e.Time)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComputedColumnSql("(CONVERT([varchar],[starttime],(114)))", false)
                .HasColumnName("time");
            entity.Property(e => e.TimeStamp).HasColumnType("datetime");
            entity.Property(e => e.TypeNameA)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.TypeNameB)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.TypeNameC)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.TypeNameD)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.TypeNameE)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.UserCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.UserName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Wtnr).HasColumnName("WTNr");
            entity.Property(e => e.WtnrA).HasColumnName("WTNrA");
            entity.Property(e => e.WtnrB).HasColumnName("WTNrB");
            entity.Property(e => e.WtnrC).HasColumnName("WTNrC");
            entity.Property(e => e.WtnrD).HasColumnName("WTNrD");
            entity.Property(e => e.WtnrE).HasColumnName("WTNrE");

            entity.HasOne(d => d.ErrorIda1Navigation).WithMany(p => p.DtreportErrorIda1Navigation)
                .HasForeignKey(d => d.ErrorIda1)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table");

            entity.HasOne(d => d.ErrorIda10Navigation).WithMany(p => p.DtreportErrorIda10Navigation)
                .HasForeignKey(d => d.ErrorIda10)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table9");

            entity.HasOne(d => d.ErrorIda11Navigation).WithMany(p => p.DtreportErrorIda11Navigation)
                .HasForeignKey(d => d.ErrorIda11)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table10");

            entity.HasOne(d => d.ErrorIda12Navigation).WithMany(p => p.DtreportErrorIda12Navigation)
                .HasForeignKey(d => d.ErrorIda12)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table11");

            entity.HasOne(d => d.ErrorIda13Navigation).WithMany(p => p.DtreportErrorIda13Navigation)
                .HasForeignKey(d => d.ErrorIda13)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table12");

            entity.HasOne(d => d.ErrorIda14Navigation).WithMany(p => p.DtreportErrorIda14Navigation)
                .HasForeignKey(d => d.ErrorIda14)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table13");

            entity.HasOne(d => d.ErrorIda15Navigation).WithMany(p => p.DtreportErrorIda15Navigation)
                .HasForeignKey(d => d.ErrorIda15)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table14");

            entity.HasOne(d => d.ErrorIda2Navigation).WithMany(p => p.DtreportErrorIda2Navigation)
                .HasForeignKey(d => d.ErrorIda2)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table1");

            entity.HasOne(d => d.ErrorIda3Navigation).WithMany(p => p.DtreportErrorIda3Navigation)
                .HasForeignKey(d => d.ErrorIda3)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table2");

            entity.HasOne(d => d.ErrorIda4Navigation).WithMany(p => p.DtreportErrorIda4Navigation)
                .HasForeignKey(d => d.ErrorIda4)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table3");

            entity.HasOne(d => d.ErrorIda5Navigation).WithMany(p => p.DtreportErrorIda5Navigation)
                .HasForeignKey(d => d.ErrorIda5)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table4");

            entity.HasOne(d => d.ErrorIda6Navigation).WithMany(p => p.DtreportErrorIda6Navigation)
                .HasForeignKey(d => d.ErrorIda6)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table5");

            entity.HasOne(d => d.ErrorIda7Navigation).WithMany(p => p.DtreportErrorIda7Navigation)
                .HasForeignKey(d => d.ErrorIda7)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table6");

            entity.HasOne(d => d.ErrorIda8Navigation).WithMany(p => p.DtreportErrorIda8Navigation)
                .HasForeignKey(d => d.ErrorIda8)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table7");

            entity.HasOne(d => d.ErrorIda9Navigation).WithMany(p => p.DtreportErrorIda9Navigation)
                .HasForeignKey(d => d.ErrorIda9)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table8");

            entity.HasOne(d => d.ErrorIdb1Navigation).WithMany(p => p.DtreportErrorIdb1Navigation)
                .HasForeignKey(d => d.ErrorIdb1)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table15");

            entity.HasOne(d => d.ErrorIdb10Navigation).WithMany(p => p.DtreportErrorIdb10Navigation)
                .HasForeignKey(d => d.ErrorIdb10)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table24");

            entity.HasOne(d => d.ErrorIdb11Navigation).WithMany(p => p.DtreportErrorIdb11Navigation)
                .HasForeignKey(d => d.ErrorIdb11)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table25");

            entity.HasOne(d => d.ErrorIdb12Navigation).WithMany(p => p.DtreportErrorIdb12Navigation)
                .HasForeignKey(d => d.ErrorIdb12)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table26");

            entity.HasOne(d => d.ErrorIdb13Navigation).WithMany(p => p.DtreportErrorIdb13Navigation)
                .HasForeignKey(d => d.ErrorIdb13)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table27");

            entity.HasOne(d => d.ErrorIdb14Navigation).WithMany(p => p.DtreportErrorIdb14Navigation)
                .HasForeignKey(d => d.ErrorIdb14)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table28");

            entity.HasOne(d => d.ErrorIdb15Navigation).WithMany(p => p.DtreportErrorIdb15Navigation)
                .HasForeignKey(d => d.ErrorIdb15)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table29");

            entity.HasOne(d => d.ErrorIdb2Navigation).WithMany(p => p.DtreportErrorIdb2Navigation)
                .HasForeignKey(d => d.ErrorIdb2)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table16");

            entity.HasOne(d => d.ErrorIdb3Navigation).WithMany(p => p.DtreportErrorIdb3Navigation)
                .HasForeignKey(d => d.ErrorIdb3)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table17");

            entity.HasOne(d => d.ErrorIdb4Navigation).WithMany(p => p.DtreportErrorIdb4Navigation)
                .HasForeignKey(d => d.ErrorIdb4)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table18");

            entity.HasOne(d => d.ErrorIdb5Navigation).WithMany(p => p.DtreportErrorIdb5Navigation)
                .HasForeignKey(d => d.ErrorIdb5)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table19");

            entity.HasOne(d => d.ErrorIdb6Navigation).WithMany(p => p.DtreportErrorIdb6Navigation)
                .HasForeignKey(d => d.ErrorIdb6)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table20");

            entity.HasOne(d => d.ErrorIdb7Navigation).WithMany(p => p.DtreportErrorIdb7Navigation)
                .HasForeignKey(d => d.ErrorIdb7)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table21");

            entity.HasOne(d => d.ErrorIdb8Navigation).WithMany(p => p.DtreportErrorIdb8Navigation)
                .HasForeignKey(d => d.ErrorIdb8)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table22");

            entity.HasOne(d => d.ErrorIdb9Navigation).WithMany(p => p.DtreportErrorIdb9Navigation)
                .HasForeignKey(d => d.ErrorIdb9)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table23");

            entity.HasOne(d => d.ErrorIdc1Navigation).WithMany(p => p.DtreportErrorIdc1Navigation)
                .HasForeignKey(d => d.ErrorIdc1)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table30");

            entity.HasOne(d => d.ErrorIdc10Navigation).WithMany(p => p.DtreportErrorIdc10Navigation)
                .HasForeignKey(d => d.ErrorIdc10)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table39");

            entity.HasOne(d => d.ErrorIdc11Navigation).WithMany(p => p.DtreportErrorIdc11Navigation)
                .HasForeignKey(d => d.ErrorIdc11)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table40");

            entity.HasOne(d => d.ErrorIdc12Navigation).WithMany(p => p.DtreportErrorIdc12Navigation)
                .HasForeignKey(d => d.ErrorIdc12)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table41");

            entity.HasOne(d => d.ErrorIdc13Navigation).WithMany(p => p.DtreportErrorIdc13Navigation)
                .HasForeignKey(d => d.ErrorIdc13)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table42");

            entity.HasOne(d => d.ErrorIdc14Navigation).WithMany(p => p.DtreportErrorIdc14Navigation)
                .HasForeignKey(d => d.ErrorIdc14)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table43");

            entity.HasOne(d => d.ErrorIdc15Navigation).WithMany(p => p.DtreportErrorIdc15Navigation)
                .HasForeignKey(d => d.ErrorIdc15)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table44");

            entity.HasOne(d => d.ErrorIdc2Navigation).WithMany(p => p.DtreportErrorIdc2Navigation)
                .HasForeignKey(d => d.ErrorIdc2)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table31");

            entity.HasOne(d => d.ErrorIdc3Navigation).WithMany(p => p.DtreportErrorIdc3Navigation)
                .HasForeignKey(d => d.ErrorIdc3)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table32");

            entity.HasOne(d => d.ErrorIdc4Navigation).WithMany(p => p.DtreportErrorIdc4Navigation)
                .HasForeignKey(d => d.ErrorIdc4)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table33");

            entity.HasOne(d => d.ErrorIdc5Navigation).WithMany(p => p.DtreportErrorIdc5Navigation)
                .HasForeignKey(d => d.ErrorIdc5)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table34");

            entity.HasOne(d => d.ErrorIdc6Navigation).WithMany(p => p.DtreportErrorIdc6Navigation)
                .HasForeignKey(d => d.ErrorIdc6)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table35");

            entity.HasOne(d => d.ErrorIdc7Navigation).WithMany(p => p.DtreportErrorIdc7Navigation)
                .HasForeignKey(d => d.ErrorIdc7)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table36");

            entity.HasOne(d => d.ErrorIdc8Navigation).WithMany(p => p.DtreportErrorIdc8Navigation)
                .HasForeignKey(d => d.ErrorIdc8)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table37");

            entity.HasOne(d => d.ErrorIdc9Navigation).WithMany(p => p.DtreportErrorIdc9Navigation)
                .HasForeignKey(d => d.ErrorIdc9)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table38");

            entity.HasOne(d => d.ErrorIdd1Navigation).WithMany(p => p.DtreportErrorIdd1Navigation)
                .HasForeignKey(d => d.ErrorIdd1)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table45");

            entity.HasOne(d => d.ErrorIdd10Navigation).WithMany(p => p.DtreportErrorIdd10Navigation)
                .HasForeignKey(d => d.ErrorIdd10)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table54");

            entity.HasOne(d => d.ErrorIdd11Navigation).WithMany(p => p.DtreportErrorIdd11Navigation)
                .HasForeignKey(d => d.ErrorIdd11)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table55");

            entity.HasOne(d => d.ErrorIdd12Navigation).WithMany(p => p.DtreportErrorIdd12Navigation)
                .HasForeignKey(d => d.ErrorIdd12)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table56");

            entity.HasOne(d => d.ErrorIdd13Navigation).WithMany(p => p.DtreportErrorIdd13Navigation)
                .HasForeignKey(d => d.ErrorIdd13)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table57");

            entity.HasOne(d => d.ErrorIdd14Navigation).WithMany(p => p.DtreportErrorIdd14Navigation)
                .HasForeignKey(d => d.ErrorIdd14)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table58");

            entity.HasOne(d => d.ErrorIdd15Navigation).WithMany(p => p.DtreportErrorIdd15Navigation)
                .HasForeignKey(d => d.ErrorIdd15)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table59");

            entity.HasOne(d => d.ErrorIdd2Navigation).WithMany(p => p.DtreportErrorIdd2Navigation)
                .HasForeignKey(d => d.ErrorIdd2)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table46");

            entity.HasOne(d => d.ErrorIdd3Navigation).WithMany(p => p.DtreportErrorIdd3Navigation)
                .HasForeignKey(d => d.ErrorIdd3)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table47");

            entity.HasOne(d => d.ErrorIdd4Navigation).WithMany(p => p.DtreportErrorIdd4Navigation)
                .HasForeignKey(d => d.ErrorIdd4)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table48");

            entity.HasOne(d => d.ErrorIdd5Navigation).WithMany(p => p.DtreportErrorIdd5Navigation)
                .HasForeignKey(d => d.ErrorIdd5)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table49");

            entity.HasOne(d => d.ErrorIdd6Navigation).WithMany(p => p.DtreportErrorIdd6Navigation)
                .HasForeignKey(d => d.ErrorIdd6)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table50");

            entity.HasOne(d => d.ErrorIdd7Navigation).WithMany(p => p.DtreportErrorIdd7Navigation)
                .HasForeignKey(d => d.ErrorIdd7)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table51");

            entity.HasOne(d => d.ErrorIdd8Navigation).WithMany(p => p.DtreportErrorIdd8Navigation)
                .HasForeignKey(d => d.ErrorIdd8)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table52");

            entity.HasOne(d => d.ErrorIdd9Navigation).WithMany(p => p.DtreportErrorIdd9Navigation)
                .HasForeignKey(d => d.ErrorIdd9)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table53");

            entity.HasOne(d => d.ErrorIde1Navigation).WithMany(p => p.DtreportErrorIde1Navigation)
                .HasForeignKey(d => d.ErrorIde1)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table60");

            entity.HasOne(d => d.ErrorIde10Navigation).WithMany(p => p.DtreportErrorIde10Navigation)
                .HasForeignKey(d => d.ErrorIde10)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table69");

            entity.HasOne(d => d.ErrorIde11Navigation).WithMany(p => p.DtreportErrorIde11Navigation)
                .HasForeignKey(d => d.ErrorIde11)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table70");

            entity.HasOne(d => d.ErrorIde12Navigation).WithMany(p => p.DtreportErrorIde12Navigation)
                .HasForeignKey(d => d.ErrorIde12)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table71");

            entity.HasOne(d => d.ErrorIde13Navigation).WithMany(p => p.DtreportErrorIde13Navigation)
                .HasForeignKey(d => d.ErrorIde13)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table72");

            entity.HasOne(d => d.ErrorIde14Navigation).WithMany(p => p.DtreportErrorIde14Navigation)
                .HasForeignKey(d => d.ErrorIde14)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table73");

            entity.HasOne(d => d.ErrorIde15Navigation).WithMany(p => p.DtreportErrorIde15Navigation)
                .HasForeignKey(d => d.ErrorIde15)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table74");

            entity.HasOne(d => d.ErrorIde2Navigation).WithMany(p => p.DtreportErrorIde2Navigation)
                .HasForeignKey(d => d.ErrorIde2)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table61");

            entity.HasOne(d => d.ErrorIde3Navigation).WithMany(p => p.DtreportErrorIde3Navigation)
                .HasForeignKey(d => d.ErrorIde3)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table62");

            entity.HasOne(d => d.ErrorIde4Navigation).WithMany(p => p.DtreportErrorIde4Navigation)
                .HasForeignKey(d => d.ErrorIde4)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table63");

            entity.HasOne(d => d.ErrorIde5Navigation).WithMany(p => p.DtreportErrorIde5Navigation)
                .HasForeignKey(d => d.ErrorIde5)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table64");

            entity.HasOne(d => d.ErrorIde6Navigation).WithMany(p => p.DtreportErrorIde6Navigation)
                .HasForeignKey(d => d.ErrorIde6)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table65");

            entity.HasOne(d => d.ErrorIde7Navigation).WithMany(p => p.DtreportErrorIde7Navigation)
                .HasForeignKey(d => d.ErrorIde7)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table66");

            entity.HasOne(d => d.ErrorIde8Navigation).WithMany(p => p.DtreportErrorIde8Navigation)
                .HasForeignKey(d => d.ErrorIde8)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table67");

            entity.HasOne(d => d.ErrorIde9Navigation).WithMany(p => p.DtreportErrorIde9Navigation)
                .HasForeignKey(d => d.ErrorIde9)
                .HasConstraintName("FK_DTReport_IFS_FailureCode_Table68");
        });

        modelBuilder.Entity<Dttypes>(entity =>
        {
            entity.ToTable("DTTypes");

            entity.HasIndex(e => new { e.LineId, e.CodeId }, "IX_DTTypes").IsUnique();

            entity.Property(e => e.CodeId)
                .IsRequired()
                .HasMaxLength(10)
                .HasDefaultValue("0000")
                .IsFixedLength();
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .IsFixedLength();
            entity.Property(e => e.DescriptionEn)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("DescriptionEN");
            entity.Property(e => e.DtgroupId).HasColumnName("DTGroupId");
            entity.Property(e => e.LineId)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.OeedownTime).HasColumnName("OEEDownTime");
            entity.Property(e => e.Search)
                .IsRequired()
                .HasMaxLength(63)
                .HasComputedColumnSql("(concat(rtrim([CodeId]),concat(' | ',[Description])))", false);
            entity.Property(e => e.SearchEn)
                .IsRequired()
                .HasMaxLength(63)
                .HasComputedColumnSql("(concat(rtrim([CodeId]),concat(' | ',[DescriptionEN])))", false);

            entity.HasOne(d => d.DttypesGroup).WithMany(p => p.Dttypes)
                .HasPrincipalKey(p => new { p.LineId, p.DtgroupId })
                .HasForeignKey(d => new { d.LineId, d.DtgroupId })
                .HasConstraintName("FK_DTTypes_DTTypesGroup");
        });

        modelBuilder.Entity<DttypesGroup>(entity =>
        {
            entity.ToTable("DTTypesGroup");

            entity.HasIndex(e => new { e.LineId, e.DtgroupId }, "IX_DTTypesGroup").IsUnique();

            entity.Property(e => e.Description).HasMaxLength(50);
            entity.Property(e => e.DescriptionEn)
                .HasMaxLength(50)
                .HasColumnName("DescriptionEN");
            entity.Property(e => e.DtgroupId)
                .IsRequired()
                .HasColumnName("DTGroupId");
            entity.Property(e => e.LineId)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength();
        });

        modelBuilder.Entity<EasyMesjob>(entity =>
        {
            entity.ToTable("EasyMESJOB");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CalcEnd).HasColumnType("datetime");
            entity.Property(e => e.CalcStart).HasColumnType("datetime");
            entity.Property(e => e.Eol).HasColumnName("EOL");
            entity.Property(e => e.JobFinish).HasColumnType("datetime");
            entity.Property(e => e.JobStart).HasColumnType("datetime");
            entity.Property(e => e.JobTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.StatusId).HasColumnName("StatusID");
            entity.Property(e => e.SystemParamId).HasColumnName("SystemParamID");
            entity.Property(e => e.TargetEnd).HasColumnType("datetime");
            entity.Property(e => e.TargetStart).HasColumnType("datetime");
            entity.Property(e => e.TtstypesId).HasColumnName("TTSTypesID");

            entity.HasOne(d => d.Status).WithMany(p => p.EasyMesjob)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("FK_EasyMESJOB_EasyMESStatus");

            entity.HasOne(d => d.SystemParam).WithMany(p => p.EasyMesjob)
                .HasPrincipalKey(p => p.Id)
                .HasForeignKey(d => d.SystemParamId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EasyMESJOB_SystemParamTable");

            entity.HasOne(d => d.Ttstypes).WithMany(p => p.EasyMesjob)
                .HasForeignKey(d => d.TtstypesId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EasyMESJOB_EasyMESTTSTypes");
        });

        modelBuilder.Entity<EasyMesstatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_EasyMESReason");

            entity.ToTable("EasyMESStatus");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Status).HasMaxLength(30);
            entity.Property(e => e.SystemParamId).HasColumnName("SystemParamID");

            entity.HasOne(d => d.SystemParam).WithMany(p => p.EasyMesstatus)
                .HasPrincipalKey(p => p.Id)
                .HasForeignKey(d => d.SystemParamId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EasyMESStatus_SystemParamTable");
        });

        modelBuilder.Entity<EasyMesttstypes>(entity =>
        {
            entity.ToTable("EasyMESTTSTypes");

            entity.HasIndex(e => new { e.SystemParamId, e.TtstypeId }, "IX_EasyMESTTSTypes").IsUnique();

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.ChangeTime).HasDefaultValueSql("('00:05:00')");
            entity.Property(e => e.CycleTime).HasDefaultValueSql("((5.6))");
            entity.Property(e => e.Enabled).HasDefaultValue(true);
            entity.Property(e => e.SystemParamId).HasColumnName("SystemParamID");
            entity.Property(e => e.TtsshortName)
                .HasMaxLength(4)
                .HasColumnName("TTSShortName");
            entity.Property(e => e.TtstypeId).HasColumnName("TTSTypeID");
            entity.Property(e => e.TtstypeName)
                .IsRequired()
                .HasMaxLength(16)
                .HasColumnName("TTSTypeName");

            entity.HasOne(d => d.SystemParam).WithMany(p => p.EasyMesttstypes)
                .HasPrincipalKey(p => p.Id)
                .HasForeignKey(d => d.SystemParamId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EasyMESTTSTypes_SystemParamTable");
        });

        modelBuilder.Entity<ErrorTable>(entity =>
        {
            entity.HasKey(e => new { e.TimeStamp, e.LineId, e.StationId, e.ErrorCode });

            entity.Property(e => e.TimeStamp).HasColumnType("datetime");
            entity.Property(e => e.LineId)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("LineID");
            entity.Property(e => e.StationId).HasColumnName("StationID");
            entity.Property(e => e.EndTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<IfsDetectionTable>(entity =>
        {
            entity.ToTable("IFS_Detection_Table");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.DescriptionEn)
                .HasMaxLength(100)
                .HasColumnName("DescriptionEN");
            entity.Property(e => e.DetectId)
                .IsRequired()
                .HasMaxLength(10)
                .HasColumnName("DetectID");
            entity.Property(e => e.LineId)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("LineID");
        });

        modelBuilder.Entity<IfsFailureClassCodeTable>(entity =>
        {
            entity.ToTable("IFS_FailureClassCode_Table");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.ClassCodeId)
                .IsRequired()
                .HasMaxLength(10)
                .HasColumnName("ClassCodeID");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.DescriptionEn)
                .HasMaxLength(100)
                .HasColumnName("DescriptionEN");
            entity.Property(e => e.LineId)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("LineID");
        });

        modelBuilder.Entity<IfsFailureCodeTable>(entity =>
        {
            entity.ToTable("IFS_FailureCode_Table");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.DescriptionEn)
                .HasMaxLength(100)
                .HasColumnName("DescriptionEN");
            entity.Property(e => e.DetectionId).HasColumnName("DetectionID");
            entity.Property(e => e.FailureClassId).HasColumnName("FailureClassID");
            entity.Property(e => e.FailureId)
                .IsRequired()
                .HasMaxLength(12)
                .HasColumnName("FailureID");
            entity.Property(e => e.LineId)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("LineID");
            entity.Property(e => e.Search)
                .IsRequired()
                .HasMaxLength(113)
                .HasComputedColumnSql("(concat([FailureID],concat(' ',[Description])))", false);
            entity.Property(e => e.SearchEn)
                .IsRequired()
                .HasMaxLength(113)
                .HasComputedColumnSql("(concat([FailureID],concat(' ',[DescriptionEN])))", false)
                .HasColumnName("SearchEN");

            entity.HasOne(d => d.Detection).WithMany(p => p.IfsFailureCodeTable)
                .HasForeignKey(d => d.DetectionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IFS_FailureCode_Table_IFS_Detection_Table");

            entity.HasOne(d => d.FailureClass).WithMany(p => p.IfsFailureCodeTable)
                .HasForeignKey(d => d.FailureClassId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IFS_FailureCode_Table_IFS_FailureClassCode_Table");
        });

        modelBuilder.Entity<IfsHeaderTable>(entity =>
        {
            entity.ToTable("IFS_Header_Table");

            entity.HasIndex(e => new { e.LineId, e.StartTime, e.ShiftId }, "IX_IFS_Header_Table");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.LineId)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("LineID");
            entity.Property(e => e.ShiftId).HasColumnName("ShiftID");
            entity.Property(e => e.StartTime).HasColumnType("datetime");

            entity.HasOne(d => d.ShiftsTable).WithMany(p => p.IfsHeaderTable)
                .HasForeignKey(d => new { d.LineId, d.StartTime, d.ShiftId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IFS_Header_Table_ShiftsTable");
        });

        modelBuilder.Entity<IfsMuszakTable>(entity =>
        {
            entity.ToTable("IFS_Muszak_Table");

            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.DescriptionEn)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("DescriptionEN");
        });

        modelBuilder.Entity<IfsValueTable>(entity =>
        {
            entity.HasKey(e => e.IfsheaderId);

            entity.ToTable("IFS_Value_Table");

            entity.Property(e => e.IfsheaderId)
                .ValueGeneratedNever()
                .HasColumnName("IFSHeaderID");
            entity.Property(e => e.FailureCodeId).HasColumnName("FailureCodeID");
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID");

            entity.HasOne(d => d.FailureCode).WithMany(p => p.IfsValueTable)
                .HasForeignKey(d => d.FailureCodeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IFS_Value_Table_IFS_FailureCode_Table");

            entity.HasOne(d => d.Ifsheader).WithOne(p => p.IfsValueTable)
                .HasForeignKey<IfsValueTable>(d => d.IfsheaderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IFS_Value_Table_IFS_Header_Table");
        });

        modelBuilder.Entity<KpidataSource>(entity =>
        {
            entity.ToTable("KPIDataSource");

            entity.Property(e => e.Name).HasMaxLength(100);
        });

        modelBuilder.Entity<Kpiexpectation>(entity =>
        {
            entity.ToTable("KPIExpectation");

            entity.Property(e => e.Name).HasMaxLength(5);
        });

        modelBuilder.Entity<Kpiheader>(entity =>
        {
            entity.ToTable("KPIHeader");

            entity.Property(e => e.DataSourceId).HasColumnName("DataSourceID");
            entity.Property(e => e.DescriptionDe)
                .HasMaxLength(100)
                .HasColumnName("DescriptionDE");
            entity.Property(e => e.DescriptionEn)
                .HasMaxLength(100)
                .HasColumnName("DescriptionEN");
            entity.Property(e => e.DescriptionHu)
                .HasMaxLength(100)
                .HasColumnName("DescriptionHU");
            entity.Property(e => e.ExpectationId).HasColumnName("ExpectationID");
            entity.Property(e => e.ProcessId).HasColumnName("ProcessID");
            entity.Property(e => e.ResponsibleId).HasColumnName("ResponsibleID");
            entity.Property(e => e.SummantionId).HasColumnName("SummantionID");
            entity.Property(e => e.UnitId).HasColumnName("UnitID");

            entity.HasOne(d => d.DataSource).WithMany(p => p.Kpiheader)
                .HasForeignKey(d => d.DataSourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_KPIHeader_KPIDataSource");

            entity.HasOne(d => d.Expectation).WithMany(p => p.Kpiheader)
                .HasForeignKey(d => d.ExpectationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_KPIHeader_KPIExpectation");

            entity.HasOne(d => d.Process).WithMany(p => p.Kpiheader)
                .HasForeignKey(d => d.ProcessId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_KPIHeader_KPIProcess");

            entity.HasOne(d => d.Responsible).WithMany(p => p.Kpiheader)
                .HasForeignKey(d => d.ResponsibleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_KPIHeader_KPIResponsible");

            entity.HasOne(d => d.Summantion).WithMany(p => p.Kpiheader)
                .HasForeignKey(d => d.SummantionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_KPIHeader_KPISummantion");

            entity.HasOne(d => d.Unit).WithMany(p => p.Kpiheader)
                .HasForeignKey(d => d.UnitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_KPIHeader_KPIUnit");
        });

        modelBuilder.Entity<Kpiprocess>(entity =>
        {
            entity.ToTable("KPIProcess");

            entity.Property(e => e.Name).HasMaxLength(100);
        });

        modelBuilder.Entity<Kpiresponsible>(entity =>
        {
            entity.ToTable("KPIResponsible");

            entity.Property(e => e.Name).HasMaxLength(100);
        });

        modelBuilder.Entity<Kpisummantion>(entity =>
        {
            entity.ToTable("KPISummantion");

            entity.Property(e => e.Name).HasMaxLength(5);
        });

        modelBuilder.Entity<Kpiunit>(entity =>
        {
            entity.ToTable("KPIUnit");

            entity.Property(e => e.Format).HasMaxLength(10);
            entity.Property(e => e.NameDe)
                .HasMaxLength(5)
                .HasColumnName("NameDE");
            entity.Property(e => e.NameEn)
                .HasMaxLength(5)
                .HasColumnName("NameEN");
            entity.Property(e => e.NameHu)
                .HasMaxLength(5)
                .HasColumnName("NameHU");
        });

        modelBuilder.Entity<Kpivalues>(entity =>
        {
            entity.ToTable("KPIValues");

            entity.Property(e => e.KpiheaderId).HasColumnName("KPIHeaderID");
            entity.Property(e => e.SortedId).HasColumnName("SortedID");
            entity.Property(e => e.Visible).HasDefaultValue(true);

            entity.HasOne(d => d.Kpiheader).WithMany(p => p.Kpivalues)
                .HasForeignKey(d => d.KpiheaderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_KPIValues_KPIHeader");
        });

        modelBuilder.Entity<Location>(entity =>
        {
            entity.Property(e => e.Description).HasMaxLength(50);
        });

        modelBuilder.Entity<LzDolgozoTable>(entity =>
        {
            entity.ToTable("LZ_Dolgozo_Table");

            entity.HasIndex(e => e.DolgozoId, "IX_LZ_Dolgozo_Table").IsUnique();

            entity.Property(e => e.BeDat).HasColumnType("date");
            entity.Property(e => e.DolgozoId).HasColumnName("DolgozoID");
            entity.Property(e => e.DolgozoNeve)
                .IsRequired()
                .HasMaxLength(40);
            entity.Property(e => e.KiDat).HasColumnType("date");
            entity.Property(e => e.Megjegyzes)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Munkaido).HasDefaultValue(8);
            entity.Property(e => e.Search)
                .IsRequired()
                .HasMaxLength(76)
                .HasComputedColumnSql("(concat([DolgozoId],concat(' | ',concat([Dolgozoneve],concat(' | ',concat([Munkaido],' órás '))))))", false);
            entity.Property(e => e.SzDat).HasColumnType("date");
            entity.Property(e => e.Telefonszam)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.UtcaHrsz)
                .IsRequired()
                .HasMaxLength(40)
                .HasColumnName("Utca_hrsz");
            entity.Property(e => e.Varos)
                .IsRequired()
                .HasMaxLength(40);
        });

        modelBuilder.Entity<LzIntervalTable>(entity =>
        {
            entity.ToTable("LZ_Interval_Table");

            entity.Property(e => e.DatumIg).HasColumnType("date");
            entity.Property(e => e.DatumTol).HasColumnType("date");
            entity.Property(e => e.DolgozoId).HasColumnName("DolgozoID");
            entity.Property(e => e.Megjegyzes).HasMaxLength(50);
            entity.Property(e => e.Ora).HasDefaultValue(8.0);
        });

        modelBuilder.Entity<LzKefetartoTable>(entity =>
        {
            entity.ToTable("LZ_Kefetarto_Table");
        });

        modelBuilder.Entity<LzKefetartotipusTable>(entity =>
        {
            entity.ToTable("LZ_Kefetartotipus_Table");

            entity.Property(e => e.Kefetartoszam)
                .IsRequired()
                .HasMaxLength(16);
        });

        modelBuilder.Entity<LzKefetartotipuslistaTable>(entity =>
        {
            entity.ToTable("LZ_Kefetartotipuslista_Table");

            entity.Property(e => e.Tipus)
                .IsRequired()
                .HasMaxLength(16);
        });

        modelBuilder.Entity<LzMunkaCodeTable>(entity =>
        {
            entity.ToTable("LZ_MunkaCode_Table");

            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(40);
            entity.Property(e => e.Short)
                .IsRequired()
                .HasMaxLength(4);
        });

        modelBuilder.Entity<LzMunkanapTable>(entity =>
        {
            entity.ToTable("LZ_Munkanap_Table");

            entity.Property(e => e.Datum).HasColumnType("date");
            entity.Property(e => e.Hetnapja)
                .IsRequired()
                .HasMaxLength(3)
                .HasDefaultValue("-");
            entity.Property(e => e.MunkaId).HasColumnName("MunkaID");
        });

        modelBuilder.Entity<LzMuszakTable>(entity =>
        {
            entity.ToTable("LZ_Muszak_Table");

            entity.HasIndex(e => e.Lzmuszak, "IX_LZ_Muszak_Table").IsUnique();

            entity.HasIndex(e => e.Muszak, "IX_LZ_Muszak_Table_TTS");

            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Lzmuszak).HasColumnName("LZMuszak");
        });

        modelBuilder.Entity<LzMuveletReszletTable>(entity =>
        {
            entity.ToTable("LZ_MuveletReszlet_Table");

            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(50)
                .HasDefaultValue("");
            entity.Property(e => e.Muveletreszlet)
                .IsRequired()
                .HasMaxLength(40)
                .HasDefaultValue("");
            entity.Property(e => e.Search)
                .IsRequired()
                .HasMaxLength(106)
                .HasComputedColumnSql("(case when isnull([Muveletreszlet],'')='' then concat([Muveletszam],concat(' | ',[Description])) else concat([Muveletszam],concat('/',concat([Muveletreszlet],concat(' | ',[Description])))) end)", false);
        });

        modelBuilder.Entity<LzTeljesitmenyTable>(entity =>
        {
            entity.ToTable("LZ_Teljesitmeny_Table");

            entity.Property(e => e.Datum).HasColumnType("date");
            entity.Property(e => e.DolgozoId).HasColumnName("DolgozoID");
            entity.Property(e => e.Megjegyzes).HasMaxLength(50);
        });

        modelBuilder.Entity<Mesevents>(entity =>
        {
            entity.ToTable("MESEvents");

            entity.Property(e => e.BackgroundColor).HasMaxLength(40);
            entity.Property(e => e.BorderColor).HasMaxLength(40);
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DisplayOrder).HasMaxLength(40);
            entity.Property(e => e.EventEnd).HasColumnType("datetime");
            entity.Property(e => e.EventStart).HasColumnType("datetime");
            entity.Property(e => e.LineId)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("LineID");
            entity.Property(e => e.TextColor).HasMaxLength(40);
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(300);
        });

        modelBuilder.Entity<MesproductPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Table_MESProductPlan");

            entity.ToTable("MESProductPlan");

            entity.HasIndex(e => new { e.LineId, e.StartTime, e.Muszak }, "IX_Table_MESProductPlan").IsUnique();

            entity.Property(e => e.LineId)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("LineID");
            entity.Property(e => e.StartTime).HasColumnType("datetime");
            entity.Property(e => e.WorkerId1).HasColumnName("WorkerID1");
            entity.Property(e => e.WorkerId2).HasColumnName("WorkerID2");

            entity.HasOne(d => d.WorkerId1Navigation).WithMany(p => p.MesproductPlanWorkerId1Navigation)
                .HasForeignKey(d => d.WorkerId1)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MESProductPlan_MESWorker");

            entity.HasOne(d => d.WorkerId2Navigation).WithMany(p => p.MesproductPlanWorkerId2Navigation)
                .HasForeignKey(d => d.WorkerId2)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MESProductPlan_MESWorker1");
        });

        modelBuilder.Entity<MesproductPlanType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Table_MESProductPlanType");

            entity.ToTable("MESProductPlanType");

            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(30);
            entity.Property(e => e.DescriptionEn)
                .IsRequired()
                .HasMaxLength(30)
                .HasColumnName("DescriptionEN");
        });

        modelBuilder.Entity<MesproductPlanWeek>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Table_MESProductPlanWeek");

            entity.ToTable("MESProductPlanWeek");

            entity.HasIndex(e => new { e.LineId, e.Year, e.Week }, "IX_Table_MESProductPlanWeek").IsUnique();

            entity.Property(e => e.From01).HasColumnName("from01");
            entity.Property(e => e.From02).HasColumnName("from02");
            entity.Property(e => e.From03).HasColumnName("from03");
            entity.Property(e => e.From11).HasColumnName("from11");
            entity.Property(e => e.From12).HasColumnName("from12");
            entity.Property(e => e.From13).HasColumnName("from13");
            entity.Property(e => e.From21).HasColumnName("from21");
            entity.Property(e => e.From22).HasColumnName("from22");
            entity.Property(e => e.From23).HasColumnName("from23");
            entity.Property(e => e.From31).HasColumnName("from31");
            entity.Property(e => e.From32).HasColumnName("from32");
            entity.Property(e => e.From33).HasColumnName("from33");
            entity.Property(e => e.From41).HasColumnName("from41");
            entity.Property(e => e.From42).HasColumnName("from42");
            entity.Property(e => e.From43).HasColumnName("from43");
            entity.Property(e => e.From51).HasColumnName("from51");
            entity.Property(e => e.From52).HasColumnName("from52");
            entity.Property(e => e.From53).HasColumnName("from53");
            entity.Property(e => e.From61).HasColumnName("from61");
            entity.Property(e => e.From62).HasColumnName("from62");
            entity.Property(e => e.From63).HasColumnName("from63");
            entity.Property(e => e.LineId)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("LineID");
            entity.Property(e => e.Mtype01)
                .HasDefaultValue(1)
                .HasColumnName("MType01");
            entity.Property(e => e.Mtype02)
                .HasDefaultValue(1)
                .HasColumnName("MType02");
            entity.Property(e => e.Mtype03)
                .HasDefaultValue(1)
                .HasColumnName("MType03");
            entity.Property(e => e.Mtype11)
                .HasDefaultValue(1)
                .HasColumnName("MType11");
            entity.Property(e => e.Mtype12)
                .HasDefaultValue(1)
                .HasColumnName("MType12");
            entity.Property(e => e.Mtype13)
                .HasDefaultValue(1)
                .HasColumnName("MType13");
            entity.Property(e => e.Mtype21)
                .HasDefaultValue(1)
                .HasColumnName("MType21");
            entity.Property(e => e.Mtype22)
                .HasDefaultValue(1)
                .HasColumnName("MType22");
            entity.Property(e => e.Mtype23)
                .HasDefaultValue(1)
                .HasColumnName("MType23");
            entity.Property(e => e.Mtype31)
                .HasDefaultValue(1)
                .HasColumnName("MType31");
            entity.Property(e => e.Mtype32)
                .HasDefaultValue(1)
                .HasColumnName("MType32");
            entity.Property(e => e.Mtype33)
                .HasDefaultValue(1)
                .HasColumnName("MType33");
            entity.Property(e => e.Mtype41)
                .HasDefaultValue(1)
                .HasColumnName("MType41");
            entity.Property(e => e.Mtype42)
                .HasDefaultValue(1)
                .HasColumnName("MType42");
            entity.Property(e => e.Mtype43)
                .HasDefaultValue(1)
                .HasColumnName("MType43");
            entity.Property(e => e.Mtype51)
                .HasDefaultValue(1)
                .HasColumnName("MType51");
            entity.Property(e => e.Mtype52)
                .HasDefaultValue(1)
                .HasColumnName("MType52");
            entity.Property(e => e.Mtype53)
                .HasDefaultValue(1)
                .HasColumnName("MType53");
            entity.Property(e => e.Mtype61)
                .HasDefaultValue(1)
                .HasColumnName("MType61");
            entity.Property(e => e.Mtype62)
                .HasDefaultValue(1)
                .HasColumnName("MType62");
            entity.Property(e => e.Mtype63)
                .HasDefaultValue(1)
                .HasColumnName("MType63");
            entity.Property(e => e.StartTime).HasColumnType("datetime");
            entity.Property(e => e.To01).HasColumnName("to01");
            entity.Property(e => e.To02).HasColumnName("to02");
            entity.Property(e => e.To03).HasColumnName("to03");
            entity.Property(e => e.To11).HasColumnName("to11");
            entity.Property(e => e.To12).HasColumnName("to12");
            entity.Property(e => e.To13).HasColumnName("to13");
            entity.Property(e => e.To21).HasColumnName("to21");
            entity.Property(e => e.To22).HasColumnName("to22");
            entity.Property(e => e.To23).HasColumnName("to23");
            entity.Property(e => e.To31).HasColumnName("to31");
            entity.Property(e => e.To32).HasColumnName("to32");
            entity.Property(e => e.To33).HasColumnName("to33");
            entity.Property(e => e.To41).HasColumnName("to41");
            entity.Property(e => e.To42).HasColumnName("to42");
            entity.Property(e => e.To43).HasColumnName("to43");
            entity.Property(e => e.To51).HasColumnName("to51");
            entity.Property(e => e.To52).HasColumnName("to52");
            entity.Property(e => e.To53).HasColumnName("to53");
            entity.Property(e => e.To61).HasColumnName("to61");
            entity.Property(e => e.To62).HasColumnName("to62");
            entity.Property(e => e.To63).HasColumnName("to63");
            entity.Property(e => e.WorkerId011).HasColumnName("WorkerID011");
            entity.Property(e => e.WorkerId012).HasColumnName("WorkerID012");
            entity.Property(e => e.WorkerId021).HasColumnName("WorkerID021");
            entity.Property(e => e.WorkerId022).HasColumnName("WorkerID022");
            entity.Property(e => e.WorkerId031).HasColumnName("WorkerID031");
            entity.Property(e => e.WorkerId032).HasColumnName("WorkerID032");
            entity.Property(e => e.WorkerId111).HasColumnName("WorkerID111");
            entity.Property(e => e.WorkerId112).HasColumnName("WorkerID112");
            entity.Property(e => e.WorkerId121).HasColumnName("WorkerID121");
            entity.Property(e => e.WorkerId122).HasColumnName("WorkerID122");
            entity.Property(e => e.WorkerId131).HasColumnName("WorkerID131");
            entity.Property(e => e.WorkerId132).HasColumnName("WorkerID132");
            entity.Property(e => e.WorkerId211).HasColumnName("WorkerID211");
            entity.Property(e => e.WorkerId212).HasColumnName("WorkerID212");
            entity.Property(e => e.WorkerId221).HasColumnName("WorkerID221");
            entity.Property(e => e.WorkerId222).HasColumnName("WorkerID222");
            entity.Property(e => e.WorkerId231).HasColumnName("WorkerID231");
            entity.Property(e => e.WorkerId232).HasColumnName("WorkerID232");
            entity.Property(e => e.WorkerId311).HasColumnName("WorkerID311");
            entity.Property(e => e.WorkerId312).HasColumnName("WorkerID312");
            entity.Property(e => e.WorkerId321).HasColumnName("WorkerID321");
            entity.Property(e => e.WorkerId322).HasColumnName("WorkerID322");
            entity.Property(e => e.WorkerId331).HasColumnName("WorkerID331");
            entity.Property(e => e.WorkerId332).HasColumnName("WorkerID332");
            entity.Property(e => e.WorkerId411).HasColumnName("WorkerID411");
            entity.Property(e => e.WorkerId412).HasColumnName("WorkerID412");
            entity.Property(e => e.WorkerId421).HasColumnName("WorkerID421");
            entity.Property(e => e.WorkerId422).HasColumnName("WorkerID422");
            entity.Property(e => e.WorkerId431).HasColumnName("WorkerID431");
            entity.Property(e => e.WorkerId432).HasColumnName("WorkerID432");
            entity.Property(e => e.WorkerId511).HasColumnName("WorkerID511");
            entity.Property(e => e.WorkerId512).HasColumnName("WorkerID512");
            entity.Property(e => e.WorkerId521).HasColumnName("WorkerID521");
            entity.Property(e => e.WorkerId522).HasColumnName("WorkerID522");
            entity.Property(e => e.WorkerId531).HasColumnName("WorkerID531");
            entity.Property(e => e.WorkerId532).HasColumnName("WorkerID532");
            entity.Property(e => e.WorkerId611).HasColumnName("WorkerID611");
            entity.Property(e => e.WorkerId612).HasColumnName("WorkerID612");
            entity.Property(e => e.WorkerId621).HasColumnName("WorkerID621");
            entity.Property(e => e.WorkerId622).HasColumnName("WorkerID622");
            entity.Property(e => e.WorkerId631).HasColumnName("WorkerID631");
            entity.Property(e => e.WorkerId632).HasColumnName("WorkerID632");
        });

        modelBuilder.Entity<MesproductPlanWeekTemp>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Table_MESProductPlanWeekTemp");

            entity.ToTable("MESProductPlanWeekTemp");

            entity.HasIndex(e => new { e.LineId, e.Year, e.Week }, "IX_Table_MESProductPlanWeekTemp").IsUnique();

            entity.Property(e => e.LineId)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("LineID");
            entity.Property(e => e.StartTime).HasColumnType("datetime");
            entity.Property(e => e.WorkerId11).HasColumnName("WorkerID11");
            entity.Property(e => e.WorkerId12).HasColumnName("WorkerID12");
            entity.Property(e => e.WorkerId21).HasColumnName("WorkerID21");
            entity.Property(e => e.WorkerId22).HasColumnName("WorkerID22");
            entity.Property(e => e.WorkerId31).HasColumnName("WorkerID31");
            entity.Property(e => e.WorkerId32).HasColumnName("WorkerID32");
        });

        modelBuilder.Entity<Mesworker>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Table_MESWorker");

            entity.ToTable("MESWorker");

            entity.Property(e => e.LineId)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("LineID");
            entity.Property(e => e.WorkerName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<ReportUsers>(entity =>
        {
            entity.Property(e => e.SystemParamId).HasColumnName("SystemParamID");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.SystemParam).WithMany(p => p.ReportUsers)
                .HasPrincipalKey(p => p.Id)
                .HasForeignKey(d => d.SystemParamId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReportUsers_SystemParamTable");

            entity.HasOne(d => d.User).WithMany(p => p.ReportUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReportUsers_AlertUsers");
        });

        modelBuilder.Entity<ShiftsTable>(entity =>
        {
            entity.HasKey(e => new { e.LineId, e.Starttime, e.Muszak });

            entity.Property(e => e.LineId)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("LineID");
            entity.Property(e => e.Starttime).HasColumnType("datetime");
            entity.Property(e => e.AllasidoH00).HasColumnName("Allasido_H00");
            entity.Property(e => e.AllasidoH01).HasColumnName("Allasido_H01");
            entity.Property(e => e.AllasidoH02).HasColumnName("Allasido_H02");
            entity.Property(e => e.AllasidoH03).HasColumnName("Allasido_H03");
            entity.Property(e => e.AllasidoH04).HasColumnName("Allasido_H04");
            entity.Property(e => e.AllasidoH05).HasColumnName("Allasido_H05");
            entity.Property(e => e.AllasidoH06).HasColumnName("Allasido_H06");
            entity.Property(e => e.AllasidoH07).HasColumnName("Allasido_H07");
            entity.Property(e => e.AllasidoH08).HasColumnName("Allasido_H08");
            entity.Property(e => e.AllasidoH09).HasColumnName("Allasido_H09");
            entity.Property(e => e.Breaktime).HasColumnName("breaktime");
            entity.Property(e => e.Cct).HasColumnName("cct");
            entity.Property(e => e.CiklusidoH00).HasColumnName("Ciklusido_H00");
            entity.Property(e => e.CiklusidoH01).HasColumnName("Ciklusido_H01");
            entity.Property(e => e.CiklusidoH02).HasColumnName("Ciklusido_H02");
            entity.Property(e => e.CiklusidoH03).HasColumnName("Ciklusido_H03");
            entity.Property(e => e.CiklusidoH04).HasColumnName("Ciklusido_H04");
            entity.Property(e => e.CiklusidoH05).HasColumnName("Ciklusido_H05");
            entity.Property(e => e.CiklusidoH06).HasColumnName("Ciklusido_H06");
            entity.Property(e => e.CiklusidoH07).HasColumnName("Ciklusido_H07");
            entity.Property(e => e.CiklusidoH08).HasColumnName("Ciklusido_H08");
            entity.Property(e => e.CiklusidoH09).HasColumnName("Ciklusido_H09");
            entity.Property(e => e.Ct).HasColumnName("ct");
            entity.Property(e => e.Cttarget).HasColumnName("CTTarget");
            entity.Property(e => e.Date)
                .HasColumnType("date")
                .HasColumnName("date");
            entity.Property(e => e.Dtime).HasColumnName("dtime");
            entity.Property(e => e.ElvartH00).HasColumnName("Elvart_H00");
            entity.Property(e => e.ElvartH01).HasColumnName("Elvart_H01");
            entity.Property(e => e.ElvartH02).HasColumnName("Elvart_H02");
            entity.Property(e => e.ElvartH03).HasColumnName("Elvart_H03");
            entity.Property(e => e.ElvartH04).HasColumnName("Elvart_H04");
            entity.Property(e => e.ElvartH05).HasColumnName("Elvart_H05");
            entity.Property(e => e.ElvartH06).HasColumnName("Elvart_H06");
            entity.Property(e => e.ElvartH07).HasColumnName("Elvart_H07");
            entity.Property(e => e.ElvartH08).HasColumnName("Elvart_H08");
            entity.Property(e => e.ElvartH09).HasColumnName("Elvart_H09");
            entity.Property(e => e.Goodparts).HasColumnName("goodparts");
            entity.Property(e => e.GyartottH00).HasColumnName("Gyartott_H00");
            entity.Property(e => e.GyartottH01).HasColumnName("Gyartott_H01");
            entity.Property(e => e.GyartottH02).HasColumnName("Gyartott_H02");
            entity.Property(e => e.GyartottH03).HasColumnName("Gyartott_H03");
            entity.Property(e => e.GyartottH04).HasColumnName("Gyartott_H04");
            entity.Property(e => e.GyartottH05).HasColumnName("Gyartott_H05");
            entity.Property(e => e.GyartottH06).HasColumnName("Gyartott_H06");
            entity.Property(e => e.GyartottH07).HasColumnName("Gyartott_H07");
            entity.Property(e => e.GyartottH08).HasColumnName("Gyartott_H08");
            entity.Property(e => e.GyartottH09).HasColumnName("Gyartott_H09");
            entity.Property(e => e.Id).ValueGeneratedOnAdd();
            entity.Property(e => e.Io100).HasColumnName("io100");
            entity.Property(e => e.Io22).HasColumnName("io22");
            entity.Property(e => e.Io23).HasColumnName("io23");
            entity.Property(e => e.LastUpdate)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.Ms).HasColumnName("MS");
            entity.Property(e => e.Ms01).HasColumnName("MS01");
            entity.Property(e => e.Ms02).HasColumnName("MS02");
            entity.Property(e => e.Ms03).HasColumnName("MS03");
            entity.Property(e => e.Ms04).HasColumnName("MS04");
            entity.Property(e => e.Ms05).HasColumnName("MS05");
            entity.Property(e => e.Ms06).HasColumnName("MS06");
            entity.Property(e => e.Ms07).HasColumnName("MS07");
            entity.Property(e => e.Ms08).HasColumnName("MS08");
            entity.Property(e => e.Ms09).HasColumnName("MS09");
            entity.Property(e => e.MunkaidoH00).HasColumnName("Munkaido_H00");
            entity.Property(e => e.MunkaidoH01).HasColumnName("Munkaido_H01");
            entity.Property(e => e.MunkaidoH02).HasColumnName("Munkaido_H02");
            entity.Property(e => e.MunkaidoH03).HasColumnName("Munkaido_H03");
            entity.Property(e => e.MunkaidoH04).HasColumnName("Munkaido_H04");
            entity.Property(e => e.MunkaidoH05).HasColumnName("Munkaido_H05");
            entity.Property(e => e.MunkaidoH06).HasColumnName("Munkaido_H06");
            entity.Property(e => e.MunkaidoH07).HasColumnName("Munkaido_H07");
            entity.Property(e => e.MunkaidoH08).HasColumnName("Munkaido_H08");
            entity.Property(e => e.MunkaidoH09).HasColumnName("Munkaido_H09");
            entity.Property(e => e.Nio08).HasColumnName("nio08");
            entity.Property(e => e.Nio100).HasColumnName("nio100");
            entity.Property(e => e.Nio22).HasColumnName("nio22");
            entity.Property(e => e.Nio23).HasColumnName("nio23");
            entity.Property(e => e.Oee).HasColumnName("OEE");
            entity.Property(e => e.Oeetarget).HasColumnName("OEEtarget");
            entity.Property(e => e.Okok0H00).HasColumnName("Okok_0_H00");
            entity.Property(e => e.Okok0H01).HasColumnName("Okok_0_H01");
            entity.Property(e => e.Okok0H02).HasColumnName("Okok_0_H02");
            entity.Property(e => e.Okok0H03).HasColumnName("Okok_0_H03");
            entity.Property(e => e.Okok0H04).HasColumnName("Okok_0_H04");
            entity.Property(e => e.Okok0H05).HasColumnName("Okok_0_H05");
            entity.Property(e => e.Okok0H06).HasColumnName("Okok_0_H06");
            entity.Property(e => e.Okok0H07).HasColumnName("Okok_0_H07");
            entity.Property(e => e.Okok0H08).HasColumnName("Okok_0_H08");
            entity.Property(e => e.Okok0H09).HasColumnName("Okok_0_H09");
            entity.Property(e => e.Okok1H00).HasColumnName("Okok_1_H00");
            entity.Property(e => e.Okok1H01).HasColumnName("Okok_1_H01");
            entity.Property(e => e.Okok1H02).HasColumnName("Okok_1_H02");
            entity.Property(e => e.Okok1H03).HasColumnName("Okok_1_H03");
            entity.Property(e => e.Okok1H04).HasColumnName("Okok_1_H04");
            entity.Property(e => e.Okok1H05).HasColumnName("Okok_1_H05");
            entity.Property(e => e.Okok1H06).HasColumnName("Okok_1_H06");
            entity.Property(e => e.Okok1H07).HasColumnName("Okok_1_H07");
            entity.Property(e => e.Okok1H08).HasColumnName("Okok_1_H08");
            entity.Property(e => e.Okok1H09).HasColumnName("Okok_1_H09");
            entity.Property(e => e.Okok2H00).HasColumnName("Okok_2_H00");
            entity.Property(e => e.Okok2H01).HasColumnName("Okok_2_H01");
            entity.Property(e => e.Okok2H02).HasColumnName("Okok_2_H02");
            entity.Property(e => e.Okok2H03).HasColumnName("Okok_2_H03");
            entity.Property(e => e.Okok2H04).HasColumnName("Okok_2_H04");
            entity.Property(e => e.Okok2H05).HasColumnName("Okok_2_H05");
            entity.Property(e => e.Okok2H06).HasColumnName("Okok_2_H06");
            entity.Property(e => e.Okok2H07).HasColumnName("Okok_2_H07");
            entity.Property(e => e.Okok2H08).HasColumnName("Okok_2_H08");
            entity.Property(e => e.Okok2H09).HasColumnName("Okok_2_H09");
            entity.Property(e => e.Okok3H00).HasColumnName("Okok_3_H00");
            entity.Property(e => e.Okok3H01).HasColumnName("Okok_3_H01");
            entity.Property(e => e.Okok3H02).HasColumnName("Okok_3_H02");
            entity.Property(e => e.Okok3H03).HasColumnName("Okok_3_H03");
            entity.Property(e => e.Okok3H04).HasColumnName("Okok_3_H04");
            entity.Property(e => e.Okok3H05).HasColumnName("Okok_3_H05");
            entity.Property(e => e.Okok3H06).HasColumnName("Okok_3_H06");
            entity.Property(e => e.Okok3H07).HasColumnName("Okok_3_H07");
            entity.Property(e => e.Okok3H08).HasColumnName("Okok_3_H08");
            entity.Property(e => e.Okok3H09).HasColumnName("Okok_3_H09");
            entity.Property(e => e.Okok4H00).HasColumnName("Okok_4_H00");
            entity.Property(e => e.Okok4H01).HasColumnName("Okok_4_H01");
            entity.Property(e => e.Okok4H02).HasColumnName("Okok_4_H02");
            entity.Property(e => e.Okok4H03).HasColumnName("Okok_4_H03");
            entity.Property(e => e.Okok4H04).HasColumnName("Okok_4_H04");
            entity.Property(e => e.Okok4H05).HasColumnName("Okok_4_H05");
            entity.Property(e => e.Okok4H06).HasColumnName("Okok_4_H06");
            entity.Property(e => e.Okok4H07).HasColumnName("Okok_4_H07");
            entity.Property(e => e.Okok4H08).HasColumnName("Okok_4_H08");
            entity.Property(e => e.Okok4H09).HasColumnName("Okok_4_H09");
            entity.Property(e => e.Okok5H00).HasColumnName("Okok_5_H00");
            entity.Property(e => e.Okok5H01).HasColumnName("Okok_5_H01");
            entity.Property(e => e.Okok5H02).HasColumnName("Okok_5_H02");
            entity.Property(e => e.Okok5H03).HasColumnName("Okok_5_H03");
            entity.Property(e => e.Okok5H04).HasColumnName("Okok_5_H04");
            entity.Property(e => e.Okok5H05).HasColumnName("Okok_5_H05");
            entity.Property(e => e.Okok5H06).HasColumnName("Okok_5_H06");
            entity.Property(e => e.Okok5H07).HasColumnName("Okok_5_H07");
            entity.Property(e => e.Okok5H08).HasColumnName("Okok_5_H08");
            entity.Property(e => e.Okok5H09).HasColumnName("Okok_5_H09");
            entity.Property(e => e.Opertime).HasColumnName("opertime");
            entity.Property(e => e.PGyartott).HasColumnName("pGyartott");
            entity.Property(e => e.PGyartottH00).HasColumnName("pGyartott_H00");
            entity.Property(e => e.PGyartottH01).HasColumnName("pGyartott_H01");
            entity.Property(e => e.PGyartottH02).HasColumnName("pGyartott_H02");
            entity.Property(e => e.PGyartottH03).HasColumnName("pGyartott_H03");
            entity.Property(e => e.PGyartottH04).HasColumnName("pGyartott_H04");
            entity.Property(e => e.PGyartottH05).HasColumnName("pGyartott_H05");
            entity.Property(e => e.PGyartottH06).HasColumnName("pGyartott_H06");
            entity.Property(e => e.PGyartottH07).HasColumnName("pGyartott_H07");
            entity.Property(e => e.PGyartottH08).HasColumnName("pGyartott_H08");
            entity.Property(e => e.PGyartottH09).HasColumnName("pGyartott_H09");
            entity.Property(e => e.Prodtime).HasColumnName("prodtime");
            entity.Property(e => e.Rework).HasColumnName("rework");
            entity.Property(e => e.Runtime).HasColumnName("runtime");
            entity.Property(e => e.SelejtH00).HasColumnName("Selejt_H00");
            entity.Property(e => e.SelejtH01).HasColumnName("Selejt_H01");
            entity.Property(e => e.SelejtH02).HasColumnName("Selejt_H02");
            entity.Property(e => e.SelejtH03).HasColumnName("Selejt_H03");
            entity.Property(e => e.SelejtH04).HasColumnName("Selejt_H04");
            entity.Property(e => e.SelejtH05).HasColumnName("Selejt_H05");
            entity.Property(e => e.SelejtH06).HasColumnName("Selejt_H06");
            entity.Property(e => e.SelejtH07).HasColumnName("Selejt_H07");
            entity.Property(e => e.SelejtH08).HasColumnName("Selejt_H08");
            entity.Property(e => e.SelejtH09).HasColumnName("Selejt_H09");
            entity.Property(e => e.SelejtRataH00).HasColumnName("SelejtRata_H00");
            entity.Property(e => e.SelejtRataH01).HasColumnName("SelejtRata_H01");
            entity.Property(e => e.SelejtRataH02).HasColumnName("SelejtRata_H02");
            entity.Property(e => e.SelejtRataH03).HasColumnName("SelejtRata_H03");
            entity.Property(e => e.SelejtRataH04).HasColumnName("SelejtRata_H04");
            entity.Property(e => e.SelejtRataH05).HasColumnName("SelejtRata_H05");
            entity.Property(e => e.SelejtRataH06).HasColumnName("SelejtRata_H06");
            entity.Property(e => e.SelejtRataH07).HasColumnName("SelejtRata_H07");
            entity.Property(e => e.SelejtRataH08).HasColumnName("SelejtRata_H08");
            entity.Property(e => e.SelejtRataH09).HasColumnName("SelejtRata_H09");
            entity.Property(e => e.Start)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.StartH00)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("Start_H00");
            entity.Property(e => e.StartH01)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("Start_H01");
            entity.Property(e => e.StartH02)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("Start_H02");
            entity.Property(e => e.StartH03)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("Start_H03");
            entity.Property(e => e.StartH04)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("Start_H04");
            entity.Property(e => e.StartH05)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("Start_H05");
            entity.Property(e => e.StartH06)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("Start_H06");
            entity.Property(e => e.StartH07)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("Start_H07");
            entity.Property(e => e.StartH08)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("Start_H08");
            entity.Property(e => e.StartH09)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("Start_H09");
            entity.Property(e => e.Stop)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.StopH00)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("Stop_H00");
            entity.Property(e => e.StopH01)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("Stop_H01");
            entity.Property(e => e.StopH02)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("Stop_H02");
            entity.Property(e => e.StopH03)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("Stop_H03");
            entity.Property(e => e.StopH04)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("Stop_H04");
            entity.Property(e => e.StopH05)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("Stop_H05");
            entity.Property(e => e.StopH06)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("Stop_H06");
            entity.Property(e => e.StopH07)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("Stop_H07");
            entity.Property(e => e.StopH08)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("Stop_H08");
            entity.Property(e => e.StopH09)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("Stop_H09");
            entity.Property(e => e.SzazalekH00).HasColumnName("Szazalek_H00");
            entity.Property(e => e.SzazalekH01).HasColumnName("Szazalek_H01");
            entity.Property(e => e.SzazalekH02).HasColumnName("Szazalek_H02");
            entity.Property(e => e.SzazalekH03).HasColumnName("Szazalek_H03");
            entity.Property(e => e.SzazalekH04).HasColumnName("Szazalek_H04");
            entity.Property(e => e.SzazalekH05).HasColumnName("Szazalek_H05");
            entity.Property(e => e.SzazalekH06).HasColumnName("Szazalek_H06");
            entity.Property(e => e.SzazalekH07).HasColumnName("Szazalek_H07");
            entity.Property(e => e.SzazalekH08).HasColumnName("Szazalek_H08");
            entity.Property(e => e.SzazalekH09).HasColumnName("Szazalek_H09");
            entity.Property(e => e.Week).HasColumnName("week");
        });

        modelBuilder.Entity<SystemParamTable>(entity =>
        {
            entity.HasKey(e => e.LineId);

            entity.HasIndex(e => e.Id, "IX_SystemParamTable").IsUnique();

            entity.Property(e => e.LineId)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("LineID");
            entity.Property(e => e.Cycletime)
                .HasDefaultValueSql("((5.7))")
                .HasColumnName("cycletime");
            entity.Property(e => e.Id).ValueGeneratedOnAdd();
            entity.Property(e => e.Linelogo)
                .HasMaxLength(16)
                .HasDefaultValue("Logo.png")
                .HasColumnName("linelogo");
            entity.Property(e => e.Linelogo1)
                .HasMaxLength(25)
                .HasDefaultValue("Logo_Logo.png")
                .HasColumnName("linelogo1");
            entity.Property(e => e.Linename)
                .HasMaxLength(16)
                .HasColumnName("linename");
            entity.Property(e => e.LocationId).HasColumnName("LocationID");
            entity.Property(e => e.M1e01)
                .HasDefaultValueSql("('07:00:00')")
                .HasColumnName("m1e01");
            entity.Property(e => e.M1e02)
                .HasDefaultValueSql("('08:00:00')")
                .HasColumnName("m1e02");
            entity.Property(e => e.M1e03)
                .HasDefaultValueSql("('09:00:00')")
                .HasColumnName("m1e03");
            entity.Property(e => e.M1e04)
                .HasDefaultValueSql("('10:00:00')")
                .HasColumnName("m1e04");
            entity.Property(e => e.M1e05)
                .HasDefaultValueSql("('11:00:00')")
                .HasColumnName("m1e05");
            entity.Property(e => e.M1e06)
                .HasDefaultValueSql("('12:00:00')")
                .HasColumnName("m1e06");
            entity.Property(e => e.M1e07)
                .HasDefaultValueSql("('13:00:00')")
                .HasColumnName("m1e07");
            entity.Property(e => e.M1e08)
                .HasDefaultValueSql("('14:00:00')")
                .HasColumnName("m1e08");
            entity.Property(e => e.M1e09)
                .HasDefaultValueSql("('14:20:00')")
                .HasColumnName("m1e09");
            entity.Property(e => e.M1end)
                .HasDefaultValueSql("('14:20:00')")
                .HasColumnName("m1end");
            entity.Property(e => e.M1s01)
                .HasDefaultValueSql("('06:00:00')")
                .HasColumnName("m1s01");
            entity.Property(e => e.M1s02)
                .HasDefaultValueSql("('07:00:00')")
                .HasColumnName("m1s02");
            entity.Property(e => e.M1s03)
                .HasDefaultValueSql("('08:00:00')")
                .HasColumnName("m1s03");
            entity.Property(e => e.M1s04)
                .HasDefaultValueSql("('09:20:00')")
                .HasColumnName("m1s04");
            entity.Property(e => e.M1s05)
                .HasDefaultValueSql("('10:00:00')")
                .HasColumnName("m1s05");
            entity.Property(e => e.M1s06)
                .HasDefaultValueSql("('11:00:00')")
                .HasColumnName("m1s06");
            entity.Property(e => e.M1s07)
                .HasDefaultValueSql("('12:05:00')")
                .HasColumnName("m1s07");
            entity.Property(e => e.M1s08)
                .HasDefaultValueSql("('13:00:00')")
                .HasColumnName("m1s08");
            entity.Property(e => e.M1s09)
                .HasDefaultValueSql("('14:00:00')")
                .HasColumnName("m1s09");
            entity.Property(e => e.M1start)
                .HasDefaultValueSql("('06:00:00')")
                .HasColumnName("m1start");
            entity.Property(e => e.M2e01)
                .HasDefaultValueSql("('15:00:00')")
                .HasColumnName("m2e01");
            entity.Property(e => e.M2e02)
                .HasDefaultValueSql("('16:00:00')")
                .HasColumnName("m2e02");
            entity.Property(e => e.M2e03)
                .HasDefaultValueSql("('16:25:00')")
                .HasColumnName("m2e03");
            entity.Property(e => e.M2e04)
                .HasDefaultValueSql("('17:00:00')")
                .HasColumnName("m2e04");
            entity.Property(e => e.M2e05)
                .HasDefaultValueSql("('17:50:00')")
                .HasColumnName("m2e05");
            entity.Property(e => e.M2e06)
                .HasDefaultValueSql("('19:00:00')")
                .HasColumnName("m2e06");
            entity.Property(e => e.M2e07)
                .HasDefaultValueSql("('20:30:00')")
                .HasColumnName("m2e07");
            entity.Property(e => e.M2e08)
                .HasDefaultValueSql("('21:00:00')")
                .HasColumnName("m2e08");
            entity.Property(e => e.M2e09)
                .HasDefaultValueSql("('22:40:00')")
                .HasColumnName("m2e09");
            entity.Property(e => e.M2end)
                .HasDefaultValueSql("('22:40:00')")
                .HasColumnName("m2end");
            entity.Property(e => e.M2s01)
                .HasDefaultValueSql("('14:20:00')")
                .HasColumnName("m2s01");
            entity.Property(e => e.M2s02)
                .HasDefaultValueSql("('15:00:00')")
                .HasColumnName("m2s02");
            entity.Property(e => e.M2s03)
                .HasDefaultValueSql("('16:00:00')")
                .HasColumnName("m2s03");
            entity.Property(e => e.M2s04)
                .HasDefaultValueSql("('16:30:00')")
                .HasColumnName("m2s04");
            entity.Property(e => e.M2s05)
                .HasDefaultValueSql("('17:00:00')")
                .HasColumnName("m2s05");
            entity.Property(e => e.M2s06)
                .HasDefaultValueSql("('18:10:00')")
                .HasColumnName("m2s06");
            entity.Property(e => e.M2s07)
                .HasDefaultValueSql("('19:00:00')")
                .HasColumnName("m2s07");
            entity.Property(e => e.M2s08)
                .HasDefaultValueSql("('20:35:00')")
                .HasColumnName("m2s08");
            entity.Property(e => e.M2s09)
                .HasDefaultValueSql("('21:00:00')")
                .HasColumnName("m2s09");
            entity.Property(e => e.M2start)
                .HasDefaultValueSql("('14:20:00')")
                .HasColumnName("m2start");
            entity.Property(e => e.M3e01)
                .HasDefaultValueSql("('23:00:00')")
                .HasColumnName("m3e01");
            entity.Property(e => e.M3e02)
                .HasDefaultValueSql("('00:00:00')")
                .HasColumnName("m3e02");
            entity.Property(e => e.M3e03)
                .HasDefaultValueSql("('01:00:00')")
                .HasColumnName("m3e03");
            entity.Property(e => e.M3e04)
                .HasDefaultValueSql("('02:00:00')")
                .HasColumnName("m3e04");
            entity.Property(e => e.M3e05)
                .HasDefaultValueSql("('02:40:00')")
                .HasColumnName("m3e05");
            entity.Property(e => e.M3e06)
                .HasDefaultValueSql("('04:00:00')")
                .HasColumnName("m3e06");
            entity.Property(e => e.M3e07)
                .HasDefaultValueSql("('05:00:00')")
                .HasColumnName("m3e07");
            entity.Property(e => e.M3e08)
                .HasDefaultValueSql("('06:00:00')")
                .HasColumnName("m3e08");
            entity.Property(e => e.M3e09)
                .HasDefaultValueSql("('06:00:00')")
                .HasColumnName("m3e09");
            entity.Property(e => e.M3end)
                .HasDefaultValueSql("('06:00:00')")
                .HasColumnName("m3end");
            entity.Property(e => e.M3s01)
                .HasDefaultValueSql("('22:40:00')")
                .HasColumnName("m3s01");
            entity.Property(e => e.M3s02)
                .HasDefaultValueSql("('23:00:00')")
                .HasColumnName("m3s02");
            entity.Property(e => e.M3s03)
                .HasDefaultValueSql("('00:00:00')")
                .HasColumnName("m3s03");
            entity.Property(e => e.M3s04)
                .HasDefaultValueSql("('01:00:00')")
                .HasColumnName("m3s04");
            entity.Property(e => e.M3s05)
                .HasDefaultValueSql("('02:00:00')")
                .HasColumnName("m3s05");
            entity.Property(e => e.M3s06)
                .HasDefaultValueSql("('03:00:00')")
                .HasColumnName("m3s06");
            entity.Property(e => e.M3s07)
                .HasDefaultValueSql("('04:00:00')")
                .HasColumnName("m3s07");
            entity.Property(e => e.M3s08)
                .HasDefaultValueSql("('05:00:00')")
                .HasColumnName("m3s08");
            entity.Property(e => e.M3s09)
                .HasDefaultValueSql("('06:00:00')")
                .HasColumnName("m3s09");
            entity.Property(e => e.M3start)
                .HasDefaultValueSql("('22:40:00')")
                .HasColumnName("m3start");
            entity.Property(e => e.Meanpercent)
                .HasDefaultValue(90.0)
                .HasColumnName("meanpercent");
            entity.Property(e => e.Minpercent)
                .HasDefaultValue(85.0)
                .HasColumnName("minpercent");
            entity.Property(e => e.OeestationId).HasColumnName("OEEStationID");
            entity.Property(e => e.Wasterate)
                .HasDefaultValue(2.0)
                .HasColumnName("wasterate");

            entity.HasOne(d => d.Location).WithMany(p => p.SystemParamTable)
                .HasForeignKey(d => d.LocationId)
                .HasConstraintName("FK_SystemParamTable_Location");
        });

        modelBuilder.Entity<TablePlannedDownTime>(entity =>
        {
            entity.ToTable("Table_Planned_DownTime");

            entity.HasIndex(e => new { e.LineId, e.Muszak, e.Start }, "IX_Table_Planned_DownTime").IsUnique();

            entity.Property(e => e.End)
                .HasDefaultValueSql("('09:20:00')")
                .HasColumnName("end");
            entity.Property(e => e.LineId)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("LineID");
            entity.Property(e => e.Muszak).HasDefaultValue(1);
            entity.Property(e => e.Start)
                .HasDefaultValueSql("('09:00:00')")
                .HasColumnName("start");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(25)
                .HasColumnName("status");
        });

        modelBuilder.Entity<TableShiftType>(entity =>
        {
            entity.HasKey(e => new { e.LineId, e.StartTime, e.Muszak, e.TypeId, e.ChangeTime });

            entity.ToTable("Table_Shift_Type");

            entity.Property(e => e.LineId)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("LineID");
            entity.Property(e => e.StartTime).HasColumnType("datetime");
            entity.Property(e => e.TypeId).HasColumnName("TypeID");
            entity.Property(e => e.ChangeTime).HasColumnType("datetime");
            entity.Property(e => e.ActiveWts).HasColumnName("ActiveWTs");
            entity.Property(e => e.Bomid).HasColumnName("BOMID");
            entity.Property(e => e.Cct).HasColumnName("cct");
            entity.Property(e => e.Ct).HasColumnName("ct");
            entity.Property(e => e.Id).ValueGeneratedOnAdd();
            entity.Property(e => e.Oee).HasColumnName("OEE");
            entity.Property(e => e.ShiftFrom).HasColumnType("datetime");
            entity.Property(e => e.ShiftTo).HasColumnType("datetime");
            entity.Property(e => e.TargetWts).HasColumnName("TargetWTs");
        });

        modelBuilder.Entity<TableStation>(entity =>
        {
            entity.ToTable("Table_Station");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Description).HasMaxLength(60);
            entity.Property(e => e.DescriptionEn)
                .HasMaxLength(60)
                .HasColumnName("DescriptionEN");
            entity.Property(e => e.KeyId)
                .IsRequired()
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasComputedColumnSql("(concat(replace([dbo].[fn_getlineid]([SystemParamID]),' ',''),'St',replace(CONVERT([varchar],CONVERT([float],[StationID])/(10)),'.','')))", false)
                .HasColumnName("KeyID");
            entity.Property(e => e.LineId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComputedColumnSql("([dbo].[fn_getlineid]([SystemParamID]))", false)
                .HasColumnName("LineID");
            entity.Property(e => e.Station).HasMaxLength(10);
            entity.Property(e => e.StationId).HasColumnName("StationID");
            entity.Property(e => e.SystemParamId).HasColumnName("SystemParamID");
        });

        modelBuilder.Entity<TableTypes>(entity =>
        {
            entity.HasKey(e => new { e.LineId, e.TypeId });

            entity.ToTable("Table_Types");

            entity.Property(e => e.LineId)
                .HasMaxLength(10)
                .HasColumnName("LineID");
            entity.Property(e => e.TypeId).HasColumnName("TypeID");
            entity.Property(e => e.ShortName).HasMaxLength(4);
            entity.Property(e => e.St15Fk1enable)
                .HasDefaultValue(true)
                .HasColumnName("St15_FK1Enable");
            entity.Property(e => e.St15Fk1prName)
                .HasMaxLength(10)
                .HasDefaultValue("test3")
                .HasColumnName("St15_FK1PrName");
            entity.Property(e => e.St15Fk1prNr)
                .HasDefaultValue(2)
                .HasColumnName("St15_FK1PrNr");
            entity.Property(e => e.St15Vtenable)
                .HasDefaultValue(true)
                .HasColumnName("St15_VTEnable");
            entity.Property(e => e.St17Fk2enable)
                .HasDefaultValue(true)
                .HasColumnName("St17_FK2Enable");
            entity.Property(e => e.St17Fk2prName)
                .HasMaxLength(10)
                .HasDefaultValue("test4")
                .HasColumnName("St17_FK2PrName");
            entity.Property(e => e.St17Fk2prNr)
                .HasDefaultValue(2)
                .HasColumnName("St17_FK2PrNr");
            entity.Property(e => e.St18Bguenable)
                .HasDefaultValue(true)
                .HasColumnName("St18_BGUEnable");
            entity.Property(e => e.St18Dgenable)
                .HasDefaultValue(true)
                .HasColumnName("St18_DGEnable");
            entity.Property(e => e.St18Dgimax)
                .HasDefaultValueSql("((23.4))")
                .HasColumnName("St18_DGImax");
            entity.Property(e => e.St18Dgimin)
                .HasDefaultValue(22f)
                .HasColumnName("St18_DGImin");
            entity.Property(e => e.St18Dgvmax)
                .HasDefaultValueSql("((0.5))")
                .HasColumnName("St18_DGVmax");
            entity.Property(e => e.St18Dgvmin)
                .HasDefaultValue(0f)
                .HasColumnName("St18_DGVmin");
            entity.Property(e => e.St18Drenable)
                .HasDefaultValue(true)
                .HasColumnName("St18_DREnable");
            entity.Property(e => e.St18Drminus)
                .HasDefaultValue(false)
                .HasColumnName("St18_DRminus");
            entity.Property(e => e.St18Drplus)
                .HasDefaultValue(true)
                .HasColumnName("St18_DRplus");
            entity.Property(e => e.St18Ksenable)
                .HasDefaultValue(true)
                .HasColumnName("St18_KSEnable");
            entity.Property(e => e.St18Ksimax)
                .HasDefaultValueSql("((0.5))")
                .HasColumnName("St18_KSImax");
            entity.Property(e => e.St18Ksimin)
                .HasDefaultValue(0f)
                .HasColumnName("St18_KSImin");
            entity.Property(e => e.St18Ksumax)
                .HasDefaultValueSql("((24.5))")
                .HasColumnName("St18_KSUmax");
            entity.Property(e => e.St18Ksumin)
                .HasDefaultValueSql("((23.5))")
                .HasColumnName("St18_KSUmin");
            entity.Property(e => e.St19Bgoenable)
                .HasDefaultValue(true)
                .HasColumnName("St19_BGOEnable");
            entity.Property(e => e.St19KautoRange)
                .HasDefaultValue(false)
                .HasColumnName("St19_KAutoRange");
            entity.Property(e => e.St19Kc)
                .HasDefaultValueSql("((0.0002))")
                .HasColumnName("St19_KC");
            entity.Property(e => e.St19Kenable)
                .HasDefaultValue(true)
                .HasColumnName("St19_KEnable");
            entity.Property(e => e.St19Kfr)
                .HasDefaultValue(120)
                .HasColumnName("St19_KFr");
            entity.Property(e => e.St19Ktolminus)
                .HasDefaultValue(-100)
                .HasColumnName("St19_KTolminus");
            entity.Property(e => e.St19Ktolplus)
                .HasDefaultValue(100)
                .HasColumnName("St19_KTolplus");
            entity.Property(e => e.St19Ku)
                .HasDefaultValue(500)
                .HasColumnName("St19_KU");
            entity.Property(e => e.St19Mkenable)
                .HasDefaultValue(true)
                .HasColumnName("St19_MKEnable");
            entity.Property(e => e.St19Range)
                .HasDefaultValue(1)
                .HasColumnName("St19_Range");
            entity.Property(e => e.St19Speed)
                .HasMaxLength(1)
                .HasDefaultValue("S")
                .HasColumnName("St19_Speed");
            entity.Property(e => e.St20LaserPrNr)
                .HasDefaultValue(1)
                .HasColumnName("St20_LaserPrNr");
            entity.Property(e => e.TypeName)
                .IsRequired()
                .HasMaxLength(16);
        });

        modelBuilder.Entity<ViewCttableUpdate>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("View_CTTableUpdate");

            entity.Property(e => e.AlertLevel)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Ct).HasColumnName("CT");
            entity.Property(e => e.Dt).HasColumnName("DT");
            entity.Property(e => e.Dtstatus)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("DTStatus");
            entity.Property(e => e.EndTime).HasColumnType("datetime");
            entity.Property(e => e.LastAlertLevel).HasMaxLength(10);
            entity.Property(e => e.LineId)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("LineID");
            entity.Property(e => e.LongCt).HasColumnName("LongCT");
            entity.Property(e => e.Nok).HasColumnName("NOK");
            entity.Property(e => e.OldTypeId)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("OldTypeID");
            entity.Property(e => e.Pt).HasColumnName("PT");
            entity.Property(e => e.StartTime).HasColumnType("datetime");
            entity.Property(e => e.StationId).HasColumnName("StationID");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.TesterId).HasColumnName("TesterID");
            entity.Property(e => e.TesterSubId).HasColumnName("TesterSubID");
            entity.Property(e => e.TimeStamp).HasColumnType("datetime");
            entity.Property(e => e.TypeId)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("TypeID");
            entity.Property(e => e.Wt).HasColumnName("WT");
            entity.Property(e => e.Wtnr).HasColumnName("WTNR");
            entity.Property(e => e.Xct).HasColumnName("XCT");
            entity.Property(e => e.Xpt).HasColumnName("XPT");
            entity.Property(e => e.Xwt).HasColumnName("XWT");
        });

        modelBuilder.Entity<ViewGbmDownTimeReasons>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("View_GBM_DownTime_Reasons");

            entity.Property(e => e.Ct).HasColumnName("CT");
            entity.Property(e => e.LineId)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("LineID");
            entity.Property(e => e.Pt).HasColumnName("PT");
            entity.Property(e => e.StartTime).HasColumnType("datetime");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.TimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Wt).HasColumnName("WT");
            entity.Property(e => e.Wtnr).HasColumnName("WTNR");
        });

        modelBuilder.Entity<ViewIfsFailureCodeTable>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("View_IFS_FailureCode_Table");

            entity.Property(e => e.ClassCodeDetection)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.ClassCodeDetectionEn)
                .HasMaxLength(100)
                .HasColumnName("ClassCodeDetectionEN");
            entity.Property(e => e.ClassCodeId)
                .IsRequired()
                .HasMaxLength(10)
                .HasColumnName("ClassCodeID");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.DescriptionEn)
                .HasMaxLength(100)
                .HasColumnName("DescriptionEN");
            entity.Property(e => e.DetectDescription)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.DetectDescriptionEn)
                .HasMaxLength(100)
                .HasColumnName("DetectDescriptionEN");
            entity.Property(e => e.DetectId)
                .IsRequired()
                .HasMaxLength(10)
                .HasColumnName("DetectID");
            entity.Property(e => e.DetectionId).HasColumnName("DetectionID");
            entity.Property(e => e.FailureClassId).HasColumnName("FailureClassID");
            entity.Property(e => e.FailureId)
                .IsRequired()
                .HasMaxLength(12)
                .HasColumnName("FailureID");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.LineId)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("LineID");
        });

        modelBuilder.Entity<ViewIfsHeaderTable>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("View_IFS_Header_Table");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.LineId)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("LineID");
            entity.Property(e => e.ShiftDescription)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ShiftDescriptionEn)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ShiftId).HasColumnName("ShiftID");
            entity.Property(e => e.StartTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ViewIfsHeadersList>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("View_IFS_HeadersList");

            entity.Property(e => e.ChangeTime).HasColumnType("datetime");
            entity.Property(e => e.LineId)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("LineID");
            entity.Property(e => e.StartTime).HasColumnType("datetime");
            entity.Property(e => e.TypeId).HasColumnName("TypeID");
            entity.Property(e => e.TypeName).HasMaxLength(16);
        });

        modelBuilder.Entity<ViewIfsValueSearchTable>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("View_IFS_ValueSearch_Table");

            entity.Property(e => e.ClassCodeId)
                .IsRequired()
                .HasMaxLength(10)
                .HasColumnName("ClassCodeID");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.DescriptionEn)
                .HasMaxLength(100)
                .HasColumnName("DescriptionEN");
            entity.Property(e => e.DetDescription)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.DetDescriptionEn)
                .HasMaxLength(100)
                .HasColumnName("DetDescriptionEN");
            entity.Property(e => e.DetectId)
                .IsRequired()
                .HasMaxLength(10)
                .HasColumnName("DetectID");
            entity.Property(e => e.FailureId)
                .IsRequired()
                .HasMaxLength(12)
                .HasColumnName("FailureID");
            entity.Property(e => e.Fccdescription)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("FCCDescription");
            entity.Property(e => e.FccdescriptionEn)
                .HasMaxLength(100)
                .HasColumnName("FCCDescriptionEN");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.LineId)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("LineID");
            entity.Property(e => e.ShiftId).HasColumnName("ShiftID");
            entity.Property(e => e.StartTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ViewIfsValueTable>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("View_IFS_Value_Table");

            entity.Property(e => e.ClassCodeDescription)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.ClassCodeDescriptionEn)
                .HasMaxLength(100)
                .HasColumnName("ClassCodeDescriptionEN");
            entity.Property(e => e.ClassCodeId)
                .IsRequired()
                .HasMaxLength(10)
                .HasColumnName("ClassCodeID");
            entity.Property(e => e.DetectDescription)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.DetectDescriptionEn)
                .HasMaxLength(100)
                .HasColumnName("DetectDescriptionEN");
            entity.Property(e => e.DetectId)
                .IsRequired()
                .HasMaxLength(10)
                .HasColumnName("DetectID");
            entity.Property(e => e.FailureClassId).HasColumnName("FailureClassID");
            entity.Property(e => e.FailureCodeId).HasColumnName("FailureCodeID");
            entity.Property(e => e.FailureDescription)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.FailureDescriptionEn)
                .HasMaxLength(100)
                .HasColumnName("FailureDescriptionEN");
            entity.Property(e => e.FailureId)
                .IsRequired()
                .HasMaxLength(12)
                .HasColumnName("FailureID");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.IfsheaderId).HasColumnName("IFSHeaderID");
            entity.Property(e => e.LineId)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("LineID");
            entity.Property(e => e.ShiftDescription)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ShiftDescriptionEn)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("ShiftDescriptionEN");
            entity.Property(e => e.ShiftId).HasColumnName("ShiftID");
            entity.Property(e => e.StartTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ViewKpivalues>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("View_KPIValues");

            entity.Property(e => e.DataSourceName).HasMaxLength(100);
            entity.Property(e => e.DescriptionDe)
                .HasMaxLength(100)
                .HasColumnName("DescriptionDE");
            entity.Property(e => e.DescriptionEn)
                .HasMaxLength(100)
                .HasColumnName("DescriptionEN");
            entity.Property(e => e.DescriptionHu)
                .HasMaxLength(100)
                .HasColumnName("DescriptionHU");
            entity.Property(e => e.ExpectationName).HasMaxLength(5);
            entity.Property(e => e.Format).HasMaxLength(10);
            entity.Property(e => e.KpiheaderId).HasColumnName("KPIHeaderID");
            entity.Property(e => e.ProcessId).HasColumnName("ProcessID");
            entity.Property(e => e.ProcessName).HasMaxLength(100);
            entity.Property(e => e.ResponsibleName).HasMaxLength(100);
            entity.Property(e => e.SortedId).HasColumnName("SortedID");
            entity.Property(e => e.SummantionName).HasMaxLength(5);
            entity.Property(e => e.UnitNameDe)
                .HasMaxLength(5)
                .HasColumnName("UnitNameDE");
            entity.Property(e => e.UnitNameEn)
                .HasMaxLength(5)
                .HasColumnName("UnitNameEN");
            entity.Property(e => e.UnitNameHu)
                .HasMaxLength(5)
                .HasColumnName("UnitNameHU");
        });

        modelBuilder.Entity<ViewLzAbFor>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("View_LZ_AbFor");

            entity.Property(e => e.Datum).HasColumnType("date");
            entity.Property(e => e.DolgozoId).HasColumnName("DolgozoID");
            entity.Property(e => e.DolgozoNeve)
                .IsRequired()
                .HasMaxLength(40);
            entity.Property(e => e.Du)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("DU");
            entity.Property(e => e.Kefetartoszam)
                .IsRequired()
                .HasMaxLength(16);
            entity.Property(e => e.Megjegyzes).HasMaxLength(50);
            entity.Property(e => e.Muveletreszlet)
                .IsRequired()
                .HasMaxLength(40);
        });

        modelBuilder.Entity<ViewLzCompetency>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("View_LZ_Competency");

            entity.Property(e => e.Ct)
                .HasMaxLength(30)
                .HasColumnName("CT");
            entity.Property(e => e.Description).HasMaxLength(50);
            entity.Property(e => e.DolgozoId).HasColumnName("DolgozoID");
            entity.Property(e => e.DolgozoNeve).HasMaxLength(40);
            entity.Property(e => e.Kefetartoszam)
                .IsRequired()
                .HasMaxLength(16);
            entity.Property(e => e.Last).HasColumnType("date");
            entity.Property(e => e.Muveletreszlet)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.Tipus)
                .IsRequired()
                .HasMaxLength(16);
        });

        modelBuilder.Entity<ViewLzHours>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("View_LZ_Hours");

            entity.Property(e => e.Category)
                .HasMaxLength(19)
                .IsUnicode(false);
            entity.Property(e => e.Company).HasMaxLength(32);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(40);
        });

        modelBuilder.Entity<ViewLzIntervalTable>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("View_LZ_Interval_Table");

            entity.Property(e => e.DatumIg).HasColumnType("date");
            entity.Property(e => e.DatumTol).HasColumnType("date");
            entity.Property(e => e.Description).HasMaxLength(50);
            entity.Property(e => e.DolgozoId).HasColumnName("DolgozoID");
            entity.Property(e => e.DolgozoNeve).HasMaxLength(40);
            entity.Property(e => e.Megjegyzes).HasMaxLength(50);
            entity.Property(e => e.Muveletreszlet)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.Search)
                .IsRequired()
                .HasMaxLength(76);
        });

        modelBuilder.Entity<ViewLzKefetartoTable>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("View_LZ_Kefetarto_Table");

            entity.Property(e => e.Description).HasMaxLength(50);
            entity.Property(e => e.Kefetartoszam)
                .IsRequired()
                .HasMaxLength(16);
            entity.Property(e => e.Muveletreszlet)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.Search)
                .IsRequired()
                .HasMaxLength(76);
            entity.Property(e => e.Tipus)
                .IsRequired()
                .HasMaxLength(16);
        });

        modelBuilder.Entity<ViewLzKefetartotipusTable>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("View_LZ_Kefetartotipus_Table");

            entity.Property(e => e.Kefetartoszam)
                .IsRequired()
                .HasMaxLength(16);
            entity.Property(e => e.Tipus)
                .IsRequired()
                .HasMaxLength(16);
        });

        modelBuilder.Entity<ViewLzMunkanapTable>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("View_LZ_Munkanap_Table");

            entity.Property(e => e.Datum).HasColumnType("date");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(40);
            entity.Property(e => e.Hetnapja)
                .IsRequired()
                .HasMaxLength(3);
            entity.Property(e => e.MunkaId).HasColumnName("MunkaID");
            entity.Property(e => e.Short)
                .IsRequired()
                .HasMaxLength(4);
        });

        modelBuilder.Entity<ViewLzSearch>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("View_LZ_Search");

            entity.Property(e => e.Description).HasMaxLength(50);
            entity.Property(e => e.Kefetartoszam)
                .IsRequired()
                .HasMaxLength(16);
            entity.Property(e => e.Muveletreszlet)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.Search)
                .IsRequired()
                .HasMaxLength(76);
            entity.Property(e => e.Tipus)
                .IsRequired()
                .HasMaxLength(16);
        });

        modelBuilder.Entity<ViewLzSzabadsag>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("View_LZ_Szabadsag");

            entity.Property(e => e.Category).HasMaxLength(28);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(40);
        });

        modelBuilder.Entity<ViewLzTeljesitmenyTable>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("View_LZ_Teljesitmeny_Table");

            entity.Property(e => e.Datum).HasColumnType("date");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.DolgozoId).HasColumnName("DolgozoID");
            entity.Property(e => e.DolgozoNeve)
                .IsRequired()
                .HasMaxLength(40);
            entity.Property(e => e.Kefetartoszam)
                .IsRequired()
                .HasMaxLength(16);
            entity.Property(e => e.Megjegyzes).HasMaxLength(50);
            entity.Property(e => e.Muszak)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Muveletreszlet)
                .IsRequired()
                .HasMaxLength(40);
            entity.Property(e => e.Tipus)
                .IsRequired()
                .HasMaxLength(16);
        });

        modelBuilder.Entity<ViewReportUsers>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("View_ReportUsers");

            entity.Property(e => e.Description).HasMaxLength(128);
            entity.Property(e => e.DescriptionEn).HasMaxLength(128);
            entity.Property(e => e.Email).HasMaxLength(128);
            entity.Property(e => e.FullName).HasMaxLength(128);
            entity.Property(e => e.LineId)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("LineID");
            entity.Property(e => e.UserName).HasMaxLength(10);
        });

        modelBuilder.Entity<ViewShiftTypes>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("View_Shift_Types");

            entity.Property(e => e.ActiveWts).HasColumnName("ActiveWTs");
            entity.Property(e => e.Cct).HasColumnName("cct");
            entity.Property(e => e.ChangeTime).HasColumnType("datetime");
            entity.Property(e => e.Ct).HasColumnName("ct");
            entity.Property(e => e.LineId)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("LineID");
            entity.Property(e => e.Oee).HasColumnName("OEE");
            entity.Property(e => e.ShiftFrom).HasColumnType("datetime");
            entity.Property(e => e.ShiftTo).HasColumnType("datetime");
            entity.Property(e => e.StartTime).HasColumnType("datetime");
            entity.Property(e => e.TargetWts).HasColumnName("TargetWTs");
            entity.Property(e => e.TypeId).HasColumnName("TypeID");
            entity.Property(e => e.TypeName)
                .IsRequired()
                .HasMaxLength(16)
                .IsFixedLength();
        });

        OnModelCreatingGeneratedProcedures(modelBuilder);
        OnModelCreatingGeneratedFunctions(modelBuilder);
        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}